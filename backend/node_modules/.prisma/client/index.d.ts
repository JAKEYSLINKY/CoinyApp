
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model transactions
 * 
 */
export type transactions = $Result.DefaultSelection<Prisma.$transactionsPayload>
/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model categoriesIcon
 * 
 */
export type categoriesIcon = $Result.DefaultSelection<Prisma.$categoriesIconPayload>
/**
 * Model userCategories
 * 
 */
export type userCategories = $Result.DefaultSelection<Prisma.$userCategoriesPayload>
/**
 * Model goals
 * 
 */
export type goals = $Result.DefaultSelection<Prisma.$goalsPayload>
/**
 * Model plans
 * 
 */
export type plans = $Result.DefaultSelection<Prisma.$plansPayload>
/**
 * Model Bonus
 * 
 */
export type Bonus = $Result.DefaultSelection<Prisma.$BonusPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const transactionsType: {
  Deposit: 'Deposit',
  Withdraw: 'Withdraw'
};

export type transactionsType = (typeof transactionsType)[keyof typeof transactionsType]


export const bonusUsage: {
  use: 'use',
  save: 'save'
};

export type bonusUsage = (typeof bonusUsage)[keyof typeof bonusUsage]

}

export type transactionsType = $Enums.transactionsType

export const transactionsType: typeof $Enums.transactionsType

export type bonusUsage = $Enums.bonusUsage

export const bonusUsage: typeof $Enums.bonusUsage

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.transactionsDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs>;

  /**
   * `prisma.categoriesIcon`: Exposes CRUD operations for the **categoriesIcon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriesIcons
    * const categoriesIcons = await prisma.categoriesIcon.findMany()
    * ```
    */
  get categoriesIcon(): Prisma.categoriesIconDelegate<ExtArgs>;

  /**
   * `prisma.userCategories`: Exposes CRUD operations for the **userCategories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCategories
    * const userCategories = await prisma.userCategories.findMany()
    * ```
    */
  get userCategories(): Prisma.userCategoriesDelegate<ExtArgs>;

  /**
   * `prisma.goals`: Exposes CRUD operations for the **goals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goals.findMany()
    * ```
    */
  get goals(): Prisma.goalsDelegate<ExtArgs>;

  /**
   * `prisma.plans`: Exposes CRUD operations for the **plans** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plans.findMany()
    * ```
    */
  get plans(): Prisma.plansDelegate<ExtArgs>;

  /**
   * `prisma.bonus`: Exposes CRUD operations for the **Bonus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bonuses
    * const bonuses = await prisma.bonus.findMany()
    * ```
    */
  get bonus(): Prisma.BonusDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    transactions: 'transactions',
    categories: 'categories',
    categoriesIcon: 'categoriesIcon',
    userCategories: 'userCategories',
    goals: 'goals',
    plans: 'plans',
    Bonus: 'Bonus'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'transactions' | 'categories' | 'categoriesIcon' | 'userCategories' | 'goals' | 'plans' | 'bonus'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      transactions: {
        payload: Prisma.$transactionsPayload<ExtArgs>
        fields: Prisma.transactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transactionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transactionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findFirst: {
            args: Prisma.transactionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transactionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findMany: {
            args: Prisma.transactionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          create: {
            args: Prisma.transactionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          createMany: {
            args: Prisma.transactionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.transactionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          update: {
            args: Prisma.transactionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          deleteMany: {
            args: Prisma.transactionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.transactionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.transactionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.transactionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.transactionsCountArgs<ExtArgs>,
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      categoriesIcon: {
        payload: Prisma.$categoriesIconPayload<ExtArgs>
        fields: Prisma.categoriesIconFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesIconFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesIconFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload>
          }
          findFirst: {
            args: Prisma.categoriesIconFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesIconFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload>
          }
          findMany: {
            args: Prisma.categoriesIconFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload>[]
          }
          create: {
            args: Prisma.categoriesIconCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload>
          }
          createMany: {
            args: Prisma.categoriesIconCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesIconDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload>
          }
          update: {
            args: Prisma.categoriesIconUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload>
          }
          deleteMany: {
            args: Prisma.categoriesIconDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesIconUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesIconUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesIconPayload>
          }
          aggregate: {
            args: Prisma.CategoriesIconAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoriesIcon>
          }
          groupBy: {
            args: Prisma.categoriesIconGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesIconGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesIconCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesIconCountAggregateOutputType> | number
          }
        }
      }
      userCategories: {
        payload: Prisma.$userCategoriesPayload<ExtArgs>
        fields: Prisma.userCategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userCategoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userCategoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload>
          }
          findFirst: {
            args: Prisma.userCategoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userCategoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload>
          }
          findMany: {
            args: Prisma.userCategoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload>[]
          }
          create: {
            args: Prisma.userCategoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload>
          }
          createMany: {
            args: Prisma.userCategoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userCategoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload>
          }
          update: {
            args: Prisma.userCategoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload>
          }
          deleteMany: {
            args: Prisma.userCategoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userCategoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userCategoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userCategoriesPayload>
          }
          aggregate: {
            args: Prisma.UserCategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserCategories>
          }
          groupBy: {
            args: Prisma.userCategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserCategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCategoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCategoriesCountAggregateOutputType> | number
          }
        }
      }
      goals: {
        payload: Prisma.$goalsPayload<ExtArgs>
        fields: Prisma.goalsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.goalsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.goalsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          findFirst: {
            args: Prisma.goalsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.goalsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          findMany: {
            args: Prisma.goalsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>[]
          }
          create: {
            args: Prisma.goalsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          createMany: {
            args: Prisma.goalsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.goalsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          update: {
            args: Prisma.goalsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          deleteMany: {
            args: Prisma.goalsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.goalsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.goalsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          aggregate: {
            args: Prisma.GoalsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGoals>
          }
          groupBy: {
            args: Prisma.goalsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GoalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.goalsCountArgs<ExtArgs>,
            result: $Utils.Optional<GoalsCountAggregateOutputType> | number
          }
        }
      }
      plans: {
        payload: Prisma.$plansPayload<ExtArgs>
        fields: Prisma.plansFieldRefs
        operations: {
          findUnique: {
            args: Prisma.plansFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.plansFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload>
          }
          findFirst: {
            args: Prisma.plansFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.plansFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload>
          }
          findMany: {
            args: Prisma.plansFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload>[]
          }
          create: {
            args: Prisma.plansCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload>
          }
          createMany: {
            args: Prisma.plansCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.plansDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload>
          }
          update: {
            args: Prisma.plansUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload>
          }
          deleteMany: {
            args: Prisma.plansDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.plansUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.plansUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$plansPayload>
          }
          aggregate: {
            args: Prisma.PlansAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlans>
          }
          groupBy: {
            args: Prisma.plansGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlansGroupByOutputType>[]
          }
          count: {
            args: Prisma.plansCountArgs<ExtArgs>,
            result: $Utils.Optional<PlansCountAggregateOutputType> | number
          }
        }
      }
      Bonus: {
        payload: Prisma.$BonusPayload<ExtArgs>
        fields: Prisma.BonusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BonusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BonusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload>
          }
          findFirst: {
            args: Prisma.BonusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BonusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload>
          }
          findMany: {
            args: Prisma.BonusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload>[]
          }
          create: {
            args: Prisma.BonusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload>
          }
          createMany: {
            args: Prisma.BonusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BonusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload>
          }
          update: {
            args: Prisma.BonusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload>
          }
          deleteMany: {
            args: Prisma.BonusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BonusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BonusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BonusPayload>
          }
          aggregate: {
            args: Prisma.BonusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBonus>
          }
          groupBy: {
            args: Prisma.BonusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BonusGroupByOutputType>[]
          }
          count: {
            args: Prisma.BonusCountArgs<ExtArgs>,
            result: $Utils.Optional<BonusCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    transactions: number
    goals: number
    plans: number
    Bonus: number
    userCategories: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | UsersCountOutputTypeCountTransactionsArgs
    goals?: boolean | UsersCountOutputTypeCountGoalsArgs
    plans?: boolean | UsersCountOutputTypeCountPlansArgs
    Bonus?: boolean | UsersCountOutputTypeCountBonusArgs
    userCategories?: boolean | UsersCountOutputTypeCountUserCategoriesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: goalsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: plansWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBonusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonusWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUserCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userCategoriesWhereInput
  }


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    transactions: number
    userCategories: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | CategoriesCountOutputTypeCountTransactionsArgs
    userCategories?: boolean | CategoriesCountOutputTypeCountUserCategoriesArgs
  }

  // Custom InputTypes
  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountUserCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userCategoriesWhereInput
  }


  /**
   * Count Type CategoriesIconCountOutputType
   */

  export type CategoriesIconCountOutputType = {
    categories: number
  }

  export type CategoriesIconCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | CategoriesIconCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * CategoriesIconCountOutputType without action
   */
  export type CategoriesIconCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesIconCountOutputType
     */
    select?: CategoriesIconCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriesIconCountOutputType without action
   */
  export type CategoriesIconCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    userId: number | null
  }

  export type UsersSumAggregateOutputType = {
    userId: number | null
  }

  export type UsersMinAggregateOutputType = {
    userId: number | null
    username: string | null
    password: string | null
    image: string | null
    created: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    userId: number | null
    username: string | null
    password: string | null
    image: string | null
    created: Date | null
  }

  export type UsersCountAggregateOutputType = {
    userId: number
    username: number
    password: number
    image: number
    created: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    userId?: true
  }

  export type UsersSumAggregateInputType = {
    userId?: true
  }

  export type UsersMinAggregateInputType = {
    userId?: true
    username?: true
    password?: true
    image?: true
    created?: true
  }

  export type UsersMaxAggregateInputType = {
    userId?: true
    username?: true
    password?: true
    image?: true
    created?: true
  }

  export type UsersCountAggregateInputType = {
    userId?: true
    username?: true
    password?: true
    image?: true
    created?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    userId: number
    username: string
    password: string
    image: string | null
    created: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    username?: boolean
    password?: boolean
    image?: boolean
    created?: boolean
    transactions?: boolean | users$transactionsArgs<ExtArgs>
    goals?: boolean | users$goalsArgs<ExtArgs>
    plans?: boolean | users$plansArgs<ExtArgs>
    Bonus?: boolean | users$BonusArgs<ExtArgs>
    userCategories?: boolean | users$userCategoriesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    userId?: boolean
    username?: boolean
    password?: boolean
    image?: boolean
    created?: boolean
  }


  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | users$transactionsArgs<ExtArgs>
    goals?: boolean | users$goalsArgs<ExtArgs>
    plans?: boolean | users$plansArgs<ExtArgs>
    Bonus?: boolean | users$BonusArgs<ExtArgs>
    userCategories?: boolean | users$userCategoriesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
      goals: Prisma.$goalsPayload<ExtArgs>[]
      plans: Prisma.$plansPayload<ExtArgs>[]
      Bonus: Prisma.$BonusPayload<ExtArgs>[]
      userCategories: Prisma.$userCategoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      username: string
      password: string
      image: string | null
      created: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    transactions<T extends users$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, users$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    goals<T extends users$goalsArgs<ExtArgs> = {}>(args?: Subset<T, users$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'findMany'> | Null>;

    plans<T extends users$plansArgs<ExtArgs> = {}>(args?: Subset<T, users$plansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'findMany'> | Null>;

    Bonus<T extends users$BonusArgs<ExtArgs> = {}>(args?: Subset<T, users$BonusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'findMany'> | Null>;

    userCategories<T extends users$userCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, users$userCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly userId: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly image: FieldRef<"users", 'String'>
    readonly created: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.transactions
   */
  export type users$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * users.goals
   */
  export type users$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    where?: goalsWhereInput
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    cursor?: goalsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * users.plans
   */
  export type users$plansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    where?: plansWhereInput
    orderBy?: plansOrderByWithRelationInput | plansOrderByWithRelationInput[]
    cursor?: plansWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlansScalarFieldEnum | PlansScalarFieldEnum[]
  }

  /**
   * users.Bonus
   */
  export type users$BonusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    where?: BonusWhereInput
    orderBy?: BonusOrderByWithRelationInput | BonusOrderByWithRelationInput[]
    cursor?: BonusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BonusScalarFieldEnum | BonusScalarFieldEnum[]
  }

  /**
   * users.userCategories
   */
  export type users$userCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    where?: userCategoriesWhereInput
    orderBy?: userCategoriesOrderByWithRelationInput | userCategoriesOrderByWithRelationInput[]
    cursor?: userCategoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCategoriesScalarFieldEnum | UserCategoriesScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    transactionId: number | null
    userId: number | null
    categoryId: number | null
    amount: number | null
  }

  export type TransactionsSumAggregateOutputType = {
    transactionId: number | null
    userId: number | null
    categoryId: number | null
    amount: number | null
  }

  export type TransactionsMinAggregateOutputType = {
    transactionId: number | null
    userId: number | null
    categoryId: number | null
    type: $Enums.transactionsType | null
    amount: number | null
    created: Date | null
  }

  export type TransactionsMaxAggregateOutputType = {
    transactionId: number | null
    userId: number | null
    categoryId: number | null
    type: $Enums.transactionsType | null
    amount: number | null
    created: Date | null
  }

  export type TransactionsCountAggregateOutputType = {
    transactionId: number
    userId: number
    categoryId: number
    type: number
    amount: number
    created: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    transactionId?: true
    userId?: true
    categoryId?: true
    amount?: true
  }

  export type TransactionsSumAggregateInputType = {
    transactionId?: true
    userId?: true
    categoryId?: true
    amount?: true
  }

  export type TransactionsMinAggregateInputType = {
    transactionId?: true
    userId?: true
    categoryId?: true
    type?: true
    amount?: true
    created?: true
  }

  export type TransactionsMaxAggregateInputType = {
    transactionId?: true
    userId?: true
    categoryId?: true
    type?: true
    amount?: true
    created?: true
  }

  export type TransactionsCountAggregateInputType = {
    transactionId?: true
    userId?: true
    categoryId?: true
    type?: true
    amount?: true
    created?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to aggregate.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type transactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithAggregationInput | transactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    transactionId: number
    userId: number
    categoryId: number
    type: $Enums.transactionsType
    amount: number
    created: Date
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends transactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type transactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transactionId?: boolean
    userId?: boolean
    categoryId?: boolean
    type?: boolean
    amount?: boolean
    created?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    categories?: boolean | transactions$categoriesArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectScalar = {
    transactionId?: boolean
    userId?: boolean
    categoryId?: boolean
    type?: boolean
    amount?: boolean
    created?: boolean
  }


  export type transactionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    categories?: boolean | transactions$categoriesArgs<ExtArgs>
  }


  export type $transactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transactions"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      categories: Prisma.$categoriesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      transactionId: number
      userId: number
      categoryId: number
      type: $Enums.transactionsType
      amount: number
      created: Date
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }


  type transactionsGetPayload<S extends boolean | null | undefined | transactionsDefaultArgs> = $Result.GetResult<Prisma.$transactionsPayload, S>

  type transactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<transactionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface transactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transactions'], meta: { name: 'transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {transactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends transactionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, transactionsFindUniqueArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Transactions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {transactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends transactionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, transactionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends transactionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, transactionsFindFirstArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends transactionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, transactionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `transactionId`
     * const transactionsWithTransactionIdOnly = await prisma.transactions.findMany({ select: { transactionId: true } })
     * 
    **/
    findMany<T extends transactionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, transactionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Transactions.
     * @param {transactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
    **/
    create<T extends transactionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, transactionsCreateArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Transactions.
     *     @param {transactionsCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transactions = await prisma.transactions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends transactionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, transactionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transactions.
     * @param {transactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
    **/
    delete<T extends transactionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, transactionsDeleteArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Transactions.
     * @param {transactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends transactionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, transactionsUpdateArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {transactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends transactionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, transactionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends transactionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, transactionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transactions.
     * @param {transactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
    **/
    upsert<T extends transactionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, transactionsUpsertArgs<ExtArgs>>
    ): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends transactionsCountArgs>(
      args?: Subset<T, transactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transactionsGroupByArgs['orderBy'] }
        : { orderBy?: transactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transactions model
   */
  readonly fields: transactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    categories<T extends transactions$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, transactions$categoriesArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the transactions model
   */ 
  interface transactionsFieldRefs {
    readonly transactionId: FieldRef<"transactions", 'Int'>
    readonly userId: FieldRef<"transactions", 'Int'>
    readonly categoryId: FieldRef<"transactions", 'Int'>
    readonly type: FieldRef<"transactions", 'transactionsType'>
    readonly amount: FieldRef<"transactions", 'Float'>
    readonly created: FieldRef<"transactions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * transactions findUnique
   */
  export type transactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findUniqueOrThrow
   */
  export type transactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findFirst
   */
  export type transactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findFirstOrThrow
   */
  export type transactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findMany
   */
  export type transactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions create
   */
  export type transactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to create a transactions.
     */
    data: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
  }

  /**
   * transactions createMany
   */
  export type transactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions update
   */
  export type transactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to update a transactions.
     */
    data: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
    /**
     * Choose, which transactions to update.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions updateMany
   */
  export type transactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions upsert
   */
  export type transactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The filter to search for the transactions to update in case it exists.
     */
    where: transactionsWhereUniqueInput
    /**
     * In case the transactions found by the `where` argument doesn't exist, create a new transactions with this data.
     */
    create: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
    /**
     * In case the transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
  }

  /**
   * transactions delete
   */
  export type transactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter which transactions to delete.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions deleteMany
   */
  export type transactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to delete
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions.categories
   */
  export type transactions$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    where?: categoriesWhereInput
  }

  /**
   * transactions without action
   */
  export type transactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
  }


  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    categoryId: number | null
    iconId: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    categoryId: number | null
    iconId: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    categoryId: number | null
    name: string | null
    iconId: number | null
  }

  export type CategoriesMaxAggregateOutputType = {
    categoryId: number | null
    name: string | null
    iconId: number | null
  }

  export type CategoriesCountAggregateOutputType = {
    categoryId: number
    name: number
    iconId: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    categoryId?: true
    iconId?: true
  }

  export type CategoriesSumAggregateInputType = {
    categoryId?: true
    iconId?: true
  }

  export type CategoriesMinAggregateInputType = {
    categoryId?: true
    name?: true
    iconId?: true
  }

  export type CategoriesMaxAggregateInputType = {
    categoryId?: true
    name?: true
    iconId?: true
  }

  export type CategoriesCountAggregateInputType = {
    categoryId?: true
    name?: true
    iconId?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    categoryId: number
    name: string
    iconId: number
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    name?: boolean
    iconId?: boolean
    icon?: boolean | categoriesIconDefaultArgs<ExtArgs>
    transactions?: boolean | categories$transactionsArgs<ExtArgs>
    userCategories?: boolean | categories$userCategoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectScalar = {
    categoryId?: boolean
    name?: boolean
    iconId?: boolean
  }


  export type categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    icon?: boolean | categoriesIconDefaultArgs<ExtArgs>
    transactions?: boolean | categories$transactionsArgs<ExtArgs>
    userCategories?: boolean | categories$userCategoriesArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      icon: Prisma.$categoriesIconPayload<ExtArgs>
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
      userCategories: Prisma.$userCategoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      categoryId: number
      name: string
      iconId: number
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `categoryId`
     * const categoriesWithCategoryIdOnly = await prisma.categories.findMany({ select: { categoryId: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    icon<T extends categoriesIconDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriesIconDefaultArgs<ExtArgs>>): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    transactions<T extends categories$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, categories$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    userCategories<T extends categories$userCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, categories$userCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categories model
   */ 
  interface categoriesFieldRefs {
    readonly categoryId: FieldRef<"categories", 'Int'>
    readonly name: FieldRef<"categories", 'String'>
    readonly iconId: FieldRef<"categories", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }

  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }

  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }

  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }

  /**
   * categories.transactions
   */
  export type categories$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * categories.userCategories
   */
  export type categories$userCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    where?: userCategoriesWhereInput
    orderBy?: userCategoriesOrderByWithRelationInput | userCategoriesOrderByWithRelationInput[]
    cursor?: userCategoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCategoriesScalarFieldEnum | UserCategoriesScalarFieldEnum[]
  }

  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
  }


  /**
   * Model categoriesIcon
   */

  export type AggregateCategoriesIcon = {
    _count: CategoriesIconCountAggregateOutputType | null
    _avg: CategoriesIconAvgAggregateOutputType | null
    _sum: CategoriesIconSumAggregateOutputType | null
    _min: CategoriesIconMinAggregateOutputType | null
    _max: CategoriesIconMaxAggregateOutputType | null
  }

  export type CategoriesIconAvgAggregateOutputType = {
    iconId: number | null
  }

  export type CategoriesIconSumAggregateOutputType = {
    iconId: number | null
  }

  export type CategoriesIconMinAggregateOutputType = {
    iconId: number | null
    iconName: string | null
  }

  export type CategoriesIconMaxAggregateOutputType = {
    iconId: number | null
    iconName: string | null
  }

  export type CategoriesIconCountAggregateOutputType = {
    iconId: number
    iconName: number
    _all: number
  }


  export type CategoriesIconAvgAggregateInputType = {
    iconId?: true
  }

  export type CategoriesIconSumAggregateInputType = {
    iconId?: true
  }

  export type CategoriesIconMinAggregateInputType = {
    iconId?: true
    iconName?: true
  }

  export type CategoriesIconMaxAggregateInputType = {
    iconId?: true
    iconName?: true
  }

  export type CategoriesIconCountAggregateInputType = {
    iconId?: true
    iconName?: true
    _all?: true
  }

  export type CategoriesIconAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoriesIcon to aggregate.
     */
    where?: categoriesIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesIcons to fetch.
     */
    orderBy?: categoriesIconOrderByWithRelationInput | categoriesIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesIcons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categoriesIcons
    **/
    _count?: true | CategoriesIconCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesIconAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesIconSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesIconMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesIconMaxAggregateInputType
  }

  export type GetCategoriesIconAggregateType<T extends CategoriesIconAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriesIcon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriesIcon[P]>
      : GetScalarType<T[P], AggregateCategoriesIcon[P]>
  }




  export type categoriesIconGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesIconWhereInput
    orderBy?: categoriesIconOrderByWithAggregationInput | categoriesIconOrderByWithAggregationInput[]
    by: CategoriesIconScalarFieldEnum[] | CategoriesIconScalarFieldEnum
    having?: categoriesIconScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesIconCountAggregateInputType | true
    _avg?: CategoriesIconAvgAggregateInputType
    _sum?: CategoriesIconSumAggregateInputType
    _min?: CategoriesIconMinAggregateInputType
    _max?: CategoriesIconMaxAggregateInputType
  }

  export type CategoriesIconGroupByOutputType = {
    iconId: number
    iconName: string
    _count: CategoriesIconCountAggregateOutputType | null
    _avg: CategoriesIconAvgAggregateOutputType | null
    _sum: CategoriesIconSumAggregateOutputType | null
    _min: CategoriesIconMinAggregateOutputType | null
    _max: CategoriesIconMaxAggregateOutputType | null
  }

  type GetCategoriesIconGroupByPayload<T extends categoriesIconGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesIconGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesIconGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesIconGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesIconGroupByOutputType[P]>
        }
      >
    >


  export type categoriesIconSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    iconId?: boolean
    iconName?: boolean
    categories?: boolean | categoriesIcon$categoriesArgs<ExtArgs>
    _count?: boolean | CategoriesIconCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoriesIcon"]>

  export type categoriesIconSelectScalar = {
    iconId?: boolean
    iconName?: boolean
  }


  export type categoriesIconInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | categoriesIcon$categoriesArgs<ExtArgs>
    _count?: boolean | CategoriesIconCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriesIconPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categoriesIcon"
    objects: {
      categories: Prisma.$categoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      iconId: number
      iconName: string
    }, ExtArgs["result"]["categoriesIcon"]>
    composites: {}
  }


  type categoriesIconGetPayload<S extends boolean | null | undefined | categoriesIconDefaultArgs> = $Result.GetResult<Prisma.$categoriesIconPayload, S>

  type categoriesIconCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesIconFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriesIconCountAggregateInputType | true
    }

  export interface categoriesIconDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categoriesIcon'], meta: { name: 'categoriesIcon' } }
    /**
     * Find zero or one CategoriesIcon that matches the filter.
     * @param {categoriesIconFindUniqueArgs} args - Arguments to find a CategoriesIcon
     * @example
     * // Get one CategoriesIcon
     * const categoriesIcon = await prisma.categoriesIcon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesIconFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesIconFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CategoriesIcon that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriesIconFindUniqueOrThrowArgs} args - Arguments to find a CategoriesIcon
     * @example
     * // Get one CategoriesIcon
     * const categoriesIcon = await prisma.categoriesIcon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesIconFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesIconFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CategoriesIcon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesIconFindFirstArgs} args - Arguments to find a CategoriesIcon
     * @example
     * // Get one CategoriesIcon
     * const categoriesIcon = await prisma.categoriesIcon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesIconFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesIconFindFirstArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CategoriesIcon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesIconFindFirstOrThrowArgs} args - Arguments to find a CategoriesIcon
     * @example
     * // Get one CategoriesIcon
     * const categoriesIcon = await prisma.categoriesIcon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesIconFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesIconFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CategoriesIcons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesIconFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriesIcons
     * const categoriesIcons = await prisma.categoriesIcon.findMany()
     * 
     * // Get first 10 CategoriesIcons
     * const categoriesIcons = await prisma.categoriesIcon.findMany({ take: 10 })
     * 
     * // Only select the `iconId`
     * const categoriesIconWithIconIdOnly = await prisma.categoriesIcon.findMany({ select: { iconId: true } })
     * 
    **/
    findMany<T extends categoriesIconFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesIconFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CategoriesIcon.
     * @param {categoriesIconCreateArgs} args - Arguments to create a CategoriesIcon.
     * @example
     * // Create one CategoriesIcon
     * const CategoriesIcon = await prisma.categoriesIcon.create({
     *   data: {
     *     // ... data to create a CategoriesIcon
     *   }
     * })
     * 
    **/
    create<T extends categoriesIconCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesIconCreateArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CategoriesIcons.
     *     @param {categoriesIconCreateManyArgs} args - Arguments to create many CategoriesIcons.
     *     @example
     *     // Create many CategoriesIcons
     *     const categoriesIcon = await prisma.categoriesIcon.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesIconCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesIconCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriesIcon.
     * @param {categoriesIconDeleteArgs} args - Arguments to delete one CategoriesIcon.
     * @example
     * // Delete one CategoriesIcon
     * const CategoriesIcon = await prisma.categoriesIcon.delete({
     *   where: {
     *     // ... filter to delete one CategoriesIcon
     *   }
     * })
     * 
    **/
    delete<T extends categoriesIconDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesIconDeleteArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CategoriesIcon.
     * @param {categoriesIconUpdateArgs} args - Arguments to update one CategoriesIcon.
     * @example
     * // Update one CategoriesIcon
     * const categoriesIcon = await prisma.categoriesIcon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesIconUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesIconUpdateArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CategoriesIcons.
     * @param {categoriesIconDeleteManyArgs} args - Arguments to filter CategoriesIcons to delete.
     * @example
     * // Delete a few CategoriesIcons
     * const { count } = await prisma.categoriesIcon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesIconDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesIconDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriesIcons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesIconUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriesIcons
     * const categoriesIcon = await prisma.categoriesIcon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesIconUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesIconUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriesIcon.
     * @param {categoriesIconUpsertArgs} args - Arguments to update or create a CategoriesIcon.
     * @example
     * // Update or create a CategoriesIcon
     * const categoriesIcon = await prisma.categoriesIcon.upsert({
     *   create: {
     *     // ... data to create a CategoriesIcon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriesIcon we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesIconUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesIconUpsertArgs<ExtArgs>>
    ): Prisma__categoriesIconClient<$Result.GetResult<Prisma.$categoriesIconPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CategoriesIcons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesIconCountArgs} args - Arguments to filter CategoriesIcons to count.
     * @example
     * // Count the number of CategoriesIcons
     * const count = await prisma.categoriesIcon.count({
     *   where: {
     *     // ... the filter for the CategoriesIcons we want to count
     *   }
     * })
    **/
    count<T extends categoriesIconCountArgs>(
      args?: Subset<T, categoriesIconCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesIconCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriesIcon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesIconAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesIconAggregateArgs>(args: Subset<T, CategoriesIconAggregateArgs>): Prisma.PrismaPromise<GetCategoriesIconAggregateType<T>>

    /**
     * Group by CategoriesIcon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesIconGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesIconGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesIconGroupByArgs['orderBy'] }
        : { orderBy?: categoriesIconGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesIconGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesIconGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categoriesIcon model
   */
  readonly fields: categoriesIconFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categoriesIcon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesIconClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categories<T extends categoriesIcon$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, categoriesIcon$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categoriesIcon model
   */ 
  interface categoriesIconFieldRefs {
    readonly iconId: FieldRef<"categoriesIcon", 'Int'>
    readonly iconName: FieldRef<"categoriesIcon", 'String'>
  }
    

  // Custom InputTypes
  /**
   * categoriesIcon findUnique
   */
  export type categoriesIconFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * Filter, which categoriesIcon to fetch.
     */
    where: categoriesIconWhereUniqueInput
  }

  /**
   * categoriesIcon findUniqueOrThrow
   */
  export type categoriesIconFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * Filter, which categoriesIcon to fetch.
     */
    where: categoriesIconWhereUniqueInput
  }

  /**
   * categoriesIcon findFirst
   */
  export type categoriesIconFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * Filter, which categoriesIcon to fetch.
     */
    where?: categoriesIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesIcons to fetch.
     */
    orderBy?: categoriesIconOrderByWithRelationInput | categoriesIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categoriesIcons.
     */
    cursor?: categoriesIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesIcons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categoriesIcons.
     */
    distinct?: CategoriesIconScalarFieldEnum | CategoriesIconScalarFieldEnum[]
  }

  /**
   * categoriesIcon findFirstOrThrow
   */
  export type categoriesIconFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * Filter, which categoriesIcon to fetch.
     */
    where?: categoriesIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesIcons to fetch.
     */
    orderBy?: categoriesIconOrderByWithRelationInput | categoriesIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categoriesIcons.
     */
    cursor?: categoriesIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesIcons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categoriesIcons.
     */
    distinct?: CategoriesIconScalarFieldEnum | CategoriesIconScalarFieldEnum[]
  }

  /**
   * categoriesIcon findMany
   */
  export type categoriesIconFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * Filter, which categoriesIcons to fetch.
     */
    where?: categoriesIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoriesIcons to fetch.
     */
    orderBy?: categoriesIconOrderByWithRelationInput | categoriesIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categoriesIcons.
     */
    cursor?: categoriesIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoriesIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoriesIcons.
     */
    skip?: number
    distinct?: CategoriesIconScalarFieldEnum | CategoriesIconScalarFieldEnum[]
  }

  /**
   * categoriesIcon create
   */
  export type categoriesIconCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * The data needed to create a categoriesIcon.
     */
    data: XOR<categoriesIconCreateInput, categoriesIconUncheckedCreateInput>
  }

  /**
   * categoriesIcon createMany
   */
  export type categoriesIconCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categoriesIcons.
     */
    data: categoriesIconCreateManyInput | categoriesIconCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categoriesIcon update
   */
  export type categoriesIconUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * The data needed to update a categoriesIcon.
     */
    data: XOR<categoriesIconUpdateInput, categoriesIconUncheckedUpdateInput>
    /**
     * Choose, which categoriesIcon to update.
     */
    where: categoriesIconWhereUniqueInput
  }

  /**
   * categoriesIcon updateMany
   */
  export type categoriesIconUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categoriesIcons.
     */
    data: XOR<categoriesIconUpdateManyMutationInput, categoriesIconUncheckedUpdateManyInput>
    /**
     * Filter which categoriesIcons to update
     */
    where?: categoriesIconWhereInput
  }

  /**
   * categoriesIcon upsert
   */
  export type categoriesIconUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * The filter to search for the categoriesIcon to update in case it exists.
     */
    where: categoriesIconWhereUniqueInput
    /**
     * In case the categoriesIcon found by the `where` argument doesn't exist, create a new categoriesIcon with this data.
     */
    create: XOR<categoriesIconCreateInput, categoriesIconUncheckedCreateInput>
    /**
     * In case the categoriesIcon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesIconUpdateInput, categoriesIconUncheckedUpdateInput>
  }

  /**
   * categoriesIcon delete
   */
  export type categoriesIconDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
    /**
     * Filter which categoriesIcon to delete.
     */
    where: categoriesIconWhereUniqueInput
  }

  /**
   * categoriesIcon deleteMany
   */
  export type categoriesIconDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoriesIcons to delete
     */
    where?: categoriesIconWhereInput
  }

  /**
   * categoriesIcon.categories
   */
  export type categoriesIcon$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    cursor?: categoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categoriesIcon without action
   */
  export type categoriesIconDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoriesIcon
     */
    select?: categoriesIconSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesIconInclude<ExtArgs> | null
  }


  /**
   * Model userCategories
   */

  export type AggregateUserCategories = {
    _count: UserCategoriesCountAggregateOutputType | null
    _avg: UserCategoriesAvgAggregateOutputType | null
    _sum: UserCategoriesSumAggregateOutputType | null
    _min: UserCategoriesMinAggregateOutputType | null
    _max: UserCategoriesMaxAggregateOutputType | null
  }

  export type UserCategoriesAvgAggregateOutputType = {
    userId: number | null
    categoryId: number | null
  }

  export type UserCategoriesSumAggregateOutputType = {
    userId: number | null
    categoryId: number | null
  }

  export type UserCategoriesMinAggregateOutputType = {
    userId: number | null
    categoryId: number | null
  }

  export type UserCategoriesMaxAggregateOutputType = {
    userId: number | null
    categoryId: number | null
  }

  export type UserCategoriesCountAggregateOutputType = {
    userId: number
    categoryId: number
    _all: number
  }


  export type UserCategoriesAvgAggregateInputType = {
    userId?: true
    categoryId?: true
  }

  export type UserCategoriesSumAggregateInputType = {
    userId?: true
    categoryId?: true
  }

  export type UserCategoriesMinAggregateInputType = {
    userId?: true
    categoryId?: true
  }

  export type UserCategoriesMaxAggregateInputType = {
    userId?: true
    categoryId?: true
  }

  export type UserCategoriesCountAggregateInputType = {
    userId?: true
    categoryId?: true
    _all?: true
  }

  export type UserCategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userCategories to aggregate.
     */
    where?: userCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userCategories to fetch.
     */
    orderBy?: userCategoriesOrderByWithRelationInput | userCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userCategories
    **/
    _count?: true | UserCategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCategoriesMaxAggregateInputType
  }

  export type GetUserCategoriesAggregateType<T extends UserCategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCategories[P]>
      : GetScalarType<T[P], AggregateUserCategories[P]>
  }




  export type userCategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userCategoriesWhereInput
    orderBy?: userCategoriesOrderByWithAggregationInput | userCategoriesOrderByWithAggregationInput[]
    by: UserCategoriesScalarFieldEnum[] | UserCategoriesScalarFieldEnum
    having?: userCategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCategoriesCountAggregateInputType | true
    _avg?: UserCategoriesAvgAggregateInputType
    _sum?: UserCategoriesSumAggregateInputType
    _min?: UserCategoriesMinAggregateInputType
    _max?: UserCategoriesMaxAggregateInputType
  }

  export type UserCategoriesGroupByOutputType = {
    userId: number
    categoryId: number
    _count: UserCategoriesCountAggregateOutputType | null
    _avg: UserCategoriesAvgAggregateOutputType | null
    _sum: UserCategoriesSumAggregateOutputType | null
    _min: UserCategoriesMinAggregateOutputType | null
    _max: UserCategoriesMaxAggregateOutputType | null
  }

  type GetUserCategoriesGroupByPayload<T extends userCategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], UserCategoriesGroupByOutputType[P]>
        }
      >
    >


  export type userCategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    categoryId?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCategories"]>

  export type userCategoriesSelectScalar = {
    userId?: boolean
    categoryId?: boolean
  }


  export type userCategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
  }


  export type $userCategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userCategories"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      categories: Prisma.$categoriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      categoryId: number
    }, ExtArgs["result"]["userCategories"]>
    composites: {}
  }


  type userCategoriesGetPayload<S extends boolean | null | undefined | userCategoriesDefaultArgs> = $Result.GetResult<Prisma.$userCategoriesPayload, S>

  type userCategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userCategoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCategoriesCountAggregateInputType | true
    }

  export interface userCategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userCategories'], meta: { name: 'userCategories' } }
    /**
     * Find zero or one UserCategories that matches the filter.
     * @param {userCategoriesFindUniqueArgs} args - Arguments to find a UserCategories
     * @example
     * // Get one UserCategories
     * const userCategories = await prisma.userCategories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userCategoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userCategoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserCategories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userCategoriesFindUniqueOrThrowArgs} args - Arguments to find a UserCategories
     * @example
     * // Get one UserCategories
     * const userCategories = await prisma.userCategories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userCategoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userCategoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCategoriesFindFirstArgs} args - Arguments to find a UserCategories
     * @example
     * // Get one UserCategories
     * const userCategories = await prisma.userCategories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userCategoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userCategoriesFindFirstArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserCategories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCategoriesFindFirstOrThrowArgs} args - Arguments to find a UserCategories
     * @example
     * // Get one UserCategories
     * const userCategories = await prisma.userCategories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userCategoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userCategoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCategories
     * const userCategories = await prisma.userCategories.findMany()
     * 
     * // Get first 10 UserCategories
     * const userCategories = await prisma.userCategories.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userCategoriesWithUserIdOnly = await prisma.userCategories.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends userCategoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCategoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserCategories.
     * @param {userCategoriesCreateArgs} args - Arguments to create a UserCategories.
     * @example
     * // Create one UserCategories
     * const UserCategories = await prisma.userCategories.create({
     *   data: {
     *     // ... data to create a UserCategories
     *   }
     * })
     * 
    **/
    create<T extends userCategoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCategoriesCreateArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserCategories.
     *     @param {userCategoriesCreateManyArgs} args - Arguments to create many UserCategories.
     *     @example
     *     // Create many UserCategories
     *     const userCategories = await prisma.userCategories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCategoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCategoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserCategories.
     * @param {userCategoriesDeleteArgs} args - Arguments to delete one UserCategories.
     * @example
     * // Delete one UserCategories
     * const UserCategories = await prisma.userCategories.delete({
     *   where: {
     *     // ... filter to delete one UserCategories
     *   }
     * })
     * 
    **/
    delete<T extends userCategoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userCategoriesDeleteArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserCategories.
     * @param {userCategoriesUpdateArgs} args - Arguments to update one UserCategories.
     * @example
     * // Update one UserCategories
     * const userCategories = await prisma.userCategories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userCategoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userCategoriesUpdateArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserCategories.
     * @param {userCategoriesDeleteManyArgs} args - Arguments to filter UserCategories to delete.
     * @example
     * // Delete a few UserCategories
     * const { count } = await prisma.userCategories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userCategoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCategoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCategories
     * const userCategories = await prisma.userCategories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userCategoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userCategoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCategories.
     * @param {userCategoriesUpsertArgs} args - Arguments to update or create a UserCategories.
     * @example
     * // Update or create a UserCategories
     * const userCategories = await prisma.userCategories.upsert({
     *   create: {
     *     // ... data to create a UserCategories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCategories we want to update
     *   }
     * })
    **/
    upsert<T extends userCategoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userCategoriesUpsertArgs<ExtArgs>>
    ): Prisma__userCategoriesClient<$Result.GetResult<Prisma.$userCategoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCategoriesCountArgs} args - Arguments to filter UserCategories to count.
     * @example
     * // Count the number of UserCategories
     * const count = await prisma.userCategories.count({
     *   where: {
     *     // ... the filter for the UserCategories we want to count
     *   }
     * })
    **/
    count<T extends userCategoriesCountArgs>(
      args?: Subset<T, userCategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCategoriesAggregateArgs>(args: Subset<T, UserCategoriesAggregateArgs>): Prisma.PrismaPromise<GetUserCategoriesAggregateType<T>>

    /**
     * Group by UserCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userCategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userCategoriesGroupByArgs['orderBy'] }
        : { orderBy?: userCategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userCategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userCategories model
   */
  readonly fields: userCategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userCategories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userCategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    categories<T extends categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriesDefaultArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the userCategories model
   */ 
  interface userCategoriesFieldRefs {
    readonly userId: FieldRef<"userCategories", 'Int'>
    readonly categoryId: FieldRef<"userCategories", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * userCategories findUnique
   */
  export type userCategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which userCategories to fetch.
     */
    where: userCategoriesWhereUniqueInput
  }

  /**
   * userCategories findUniqueOrThrow
   */
  export type userCategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which userCategories to fetch.
     */
    where: userCategoriesWhereUniqueInput
  }

  /**
   * userCategories findFirst
   */
  export type userCategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which userCategories to fetch.
     */
    where?: userCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userCategories to fetch.
     */
    orderBy?: userCategoriesOrderByWithRelationInput | userCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userCategories.
     */
    cursor?: userCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userCategories.
     */
    distinct?: UserCategoriesScalarFieldEnum | UserCategoriesScalarFieldEnum[]
  }

  /**
   * userCategories findFirstOrThrow
   */
  export type userCategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which userCategories to fetch.
     */
    where?: userCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userCategories to fetch.
     */
    orderBy?: userCategoriesOrderByWithRelationInput | userCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userCategories.
     */
    cursor?: userCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userCategories.
     */
    distinct?: UserCategoriesScalarFieldEnum | UserCategoriesScalarFieldEnum[]
  }

  /**
   * userCategories findMany
   */
  export type userCategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which userCategories to fetch.
     */
    where?: userCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userCategories to fetch.
     */
    orderBy?: userCategoriesOrderByWithRelationInput | userCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userCategories.
     */
    cursor?: userCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userCategories.
     */
    skip?: number
    distinct?: UserCategoriesScalarFieldEnum | UserCategoriesScalarFieldEnum[]
  }

  /**
   * userCategories create
   */
  export type userCategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a userCategories.
     */
    data: XOR<userCategoriesCreateInput, userCategoriesUncheckedCreateInput>
  }

  /**
   * userCategories createMany
   */
  export type userCategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userCategories.
     */
    data: userCategoriesCreateManyInput | userCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userCategories update
   */
  export type userCategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a userCategories.
     */
    data: XOR<userCategoriesUpdateInput, userCategoriesUncheckedUpdateInput>
    /**
     * Choose, which userCategories to update.
     */
    where: userCategoriesWhereUniqueInput
  }

  /**
   * userCategories updateMany
   */
  export type userCategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userCategories.
     */
    data: XOR<userCategoriesUpdateManyMutationInput, userCategoriesUncheckedUpdateManyInput>
    /**
     * Filter which userCategories to update
     */
    where?: userCategoriesWhereInput
  }

  /**
   * userCategories upsert
   */
  export type userCategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the userCategories to update in case it exists.
     */
    where: userCategoriesWhereUniqueInput
    /**
     * In case the userCategories found by the `where` argument doesn't exist, create a new userCategories with this data.
     */
    create: XOR<userCategoriesCreateInput, userCategoriesUncheckedCreateInput>
    /**
     * In case the userCategories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userCategoriesUpdateInput, userCategoriesUncheckedUpdateInput>
  }

  /**
   * userCategories delete
   */
  export type userCategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
    /**
     * Filter which userCategories to delete.
     */
    where: userCategoriesWhereUniqueInput
  }

  /**
   * userCategories deleteMany
   */
  export type userCategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userCategories to delete
     */
    where?: userCategoriesWhereInput
  }

  /**
   * userCategories without action
   */
  export type userCategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userCategories
     */
    select?: userCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userCategoriesInclude<ExtArgs> | null
  }


  /**
   * Model goals
   */

  export type AggregateGoals = {
    _count: GoalsCountAggregateOutputType | null
    _avg: GoalsAvgAggregateOutputType | null
    _sum: GoalsSumAggregateOutputType | null
    _min: GoalsMinAggregateOutputType | null
    _max: GoalsMaxAggregateOutputType | null
  }

  export type GoalsAvgAggregateOutputType = {
    goalId: number | null
    userId: number | null
    goalAmount: number | null
    currentAmount: number | null
  }

  export type GoalsSumAggregateOutputType = {
    goalId: number | null
    userId: number | null
    goalAmount: number | null
    currentAmount: number | null
  }

  export type GoalsMinAggregateOutputType = {
    goalId: number | null
    userId: number | null
    name: string | null
    goalAmount: number | null
    currentAmount: number | null
    created: Date | null
  }

  export type GoalsMaxAggregateOutputType = {
    goalId: number | null
    userId: number | null
    name: string | null
    goalAmount: number | null
    currentAmount: number | null
    created: Date | null
  }

  export type GoalsCountAggregateOutputType = {
    goalId: number
    userId: number
    name: number
    goalAmount: number
    currentAmount: number
    created: number
    _all: number
  }


  export type GoalsAvgAggregateInputType = {
    goalId?: true
    userId?: true
    goalAmount?: true
    currentAmount?: true
  }

  export type GoalsSumAggregateInputType = {
    goalId?: true
    userId?: true
    goalAmount?: true
    currentAmount?: true
  }

  export type GoalsMinAggregateInputType = {
    goalId?: true
    userId?: true
    name?: true
    goalAmount?: true
    currentAmount?: true
    created?: true
  }

  export type GoalsMaxAggregateInputType = {
    goalId?: true
    userId?: true
    name?: true
    goalAmount?: true
    currentAmount?: true
    created?: true
  }

  export type GoalsCountAggregateInputType = {
    goalId?: true
    userId?: true
    name?: true
    goalAmount?: true
    currentAmount?: true
    created?: true
    _all?: true
  }

  export type GoalsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which goals to aggregate.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned goals
    **/
    _count?: true | GoalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalsMaxAggregateInputType
  }

  export type GetGoalsAggregateType<T extends GoalsAggregateArgs> = {
        [P in keyof T & keyof AggregateGoals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoals[P]>
      : GetScalarType<T[P], AggregateGoals[P]>
  }




  export type goalsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: goalsWhereInput
    orderBy?: goalsOrderByWithAggregationInput | goalsOrderByWithAggregationInput[]
    by: GoalsScalarFieldEnum[] | GoalsScalarFieldEnum
    having?: goalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalsCountAggregateInputType | true
    _avg?: GoalsAvgAggregateInputType
    _sum?: GoalsSumAggregateInputType
    _min?: GoalsMinAggregateInputType
    _max?: GoalsMaxAggregateInputType
  }

  export type GoalsGroupByOutputType = {
    goalId: number
    userId: number
    name: string | null
    goalAmount: number
    currentAmount: number | null
    created: Date
    _count: GoalsCountAggregateOutputType | null
    _avg: GoalsAvgAggregateOutputType | null
    _sum: GoalsSumAggregateOutputType | null
    _min: GoalsMinAggregateOutputType | null
    _max: GoalsMaxAggregateOutputType | null
  }

  type GetGoalsGroupByPayload<T extends goalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalsGroupByOutputType[P]>
            : GetScalarType<T[P], GoalsGroupByOutputType[P]>
        }
      >
    >


  export type goalsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    goalId?: boolean
    userId?: boolean
    name?: boolean
    goalAmount?: boolean
    currentAmount?: boolean
    created?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goals"]>

  export type goalsSelectScalar = {
    goalId?: boolean
    userId?: boolean
    name?: boolean
    goalAmount?: boolean
    currentAmount?: boolean
    created?: boolean
  }


  export type goalsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }


  export type $goalsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "goals"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      goalId: number
      userId: number
      name: string | null
      goalAmount: number
      currentAmount: number | null
      created: Date
    }, ExtArgs["result"]["goals"]>
    composites: {}
  }


  type goalsGetPayload<S extends boolean | null | undefined | goalsDefaultArgs> = $Result.GetResult<Prisma.$goalsPayload, S>

  type goalsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<goalsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalsCountAggregateInputType | true
    }

  export interface goalsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['goals'], meta: { name: 'goals' } }
    /**
     * Find zero or one Goals that matches the filter.
     * @param {goalsFindUniqueArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends goalsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, goalsFindUniqueArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Goals that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {goalsFindUniqueOrThrowArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends goalsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, goalsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindFirstArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends goalsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, goalsFindFirstArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Goals that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindFirstOrThrowArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends goalsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, goalsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goals.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goals.findMany({ take: 10 })
     * 
     * // Only select the `goalId`
     * const goalsWithGoalIdOnly = await prisma.goals.findMany({ select: { goalId: true } })
     * 
    **/
    findMany<T extends goalsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, goalsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Goals.
     * @param {goalsCreateArgs} args - Arguments to create a Goals.
     * @example
     * // Create one Goals
     * const Goals = await prisma.goals.create({
     *   data: {
     *     // ... data to create a Goals
     *   }
     * })
     * 
    **/
    create<T extends goalsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, goalsCreateArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Goals.
     *     @param {goalsCreateManyArgs} args - Arguments to create many Goals.
     *     @example
     *     // Create many Goals
     *     const goals = await prisma.goals.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends goalsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, goalsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Goals.
     * @param {goalsDeleteArgs} args - Arguments to delete one Goals.
     * @example
     * // Delete one Goals
     * const Goals = await prisma.goals.delete({
     *   where: {
     *     // ... filter to delete one Goals
     *   }
     * })
     * 
    **/
    delete<T extends goalsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, goalsDeleteArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Goals.
     * @param {goalsUpdateArgs} args - Arguments to update one Goals.
     * @example
     * // Update one Goals
     * const goals = await prisma.goals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends goalsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, goalsUpdateArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Goals.
     * @param {goalsDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends goalsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, goalsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goals = await prisma.goals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends goalsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, goalsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goals.
     * @param {goalsUpsertArgs} args - Arguments to update or create a Goals.
     * @example
     * // Update or create a Goals
     * const goals = await prisma.goals.upsert({
     *   create: {
     *     // ... data to create a Goals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goals we want to update
     *   }
     * })
    **/
    upsert<T extends goalsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, goalsUpsertArgs<ExtArgs>>
    ): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goals.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends goalsCountArgs>(
      args?: Subset<T, goalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalsAggregateArgs>(args: Subset<T, GoalsAggregateArgs>): Prisma.PrismaPromise<GetGoalsAggregateType<T>>

    /**
     * Group by Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends goalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: goalsGroupByArgs['orderBy'] }
        : { orderBy?: goalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, goalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the goals model
   */
  readonly fields: goalsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for goals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__goalsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the goals model
   */ 
  interface goalsFieldRefs {
    readonly goalId: FieldRef<"goals", 'Int'>
    readonly userId: FieldRef<"goals", 'Int'>
    readonly name: FieldRef<"goals", 'String'>
    readonly goalAmount: FieldRef<"goals", 'Int'>
    readonly currentAmount: FieldRef<"goals", 'Int'>
    readonly created: FieldRef<"goals", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * goals findUnique
   */
  export type goalsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals findUniqueOrThrow
   */
  export type goalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals findFirst
   */
  export type goalsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of goals.
     */
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals findFirstOrThrow
   */
  export type goalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of goals.
     */
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals findMany
   */
  export type goalsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals create
   */
  export type goalsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The data needed to create a goals.
     */
    data: XOR<goalsCreateInput, goalsUncheckedCreateInput>
  }

  /**
   * goals createMany
   */
  export type goalsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many goals.
     */
    data: goalsCreateManyInput | goalsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * goals update
   */
  export type goalsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The data needed to update a goals.
     */
    data: XOR<goalsUpdateInput, goalsUncheckedUpdateInput>
    /**
     * Choose, which goals to update.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals updateMany
   */
  export type goalsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update goals.
     */
    data: XOR<goalsUpdateManyMutationInput, goalsUncheckedUpdateManyInput>
    /**
     * Filter which goals to update
     */
    where?: goalsWhereInput
  }

  /**
   * goals upsert
   */
  export type goalsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The filter to search for the goals to update in case it exists.
     */
    where: goalsWhereUniqueInput
    /**
     * In case the goals found by the `where` argument doesn't exist, create a new goals with this data.
     */
    create: XOR<goalsCreateInput, goalsUncheckedCreateInput>
    /**
     * In case the goals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<goalsUpdateInput, goalsUncheckedUpdateInput>
  }

  /**
   * goals delete
   */
  export type goalsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter which goals to delete.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals deleteMany
   */
  export type goalsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which goals to delete
     */
    where?: goalsWhereInput
  }

  /**
   * goals without action
   */
  export type goalsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
  }


  /**
   * Model plans
   */

  export type AggregatePlans = {
    _count: PlansCountAggregateOutputType | null
    _avg: PlansAvgAggregateOutputType | null
    _sum: PlansSumAggregateOutputType | null
    _min: PlansMinAggregateOutputType | null
    _max: PlansMaxAggregateOutputType | null
  }

  export type PlansAvgAggregateOutputType = {
    planId: number | null
    userId: number | null
    monthly: number | null
    save: number | null
  }

  export type PlansSumAggregateOutputType = {
    planId: number | null
    userId: number | null
    monthly: number | null
    save: number | null
  }

  export type PlansMinAggregateOutputType = {
    planId: number | null
    userId: number | null
    monthly: number | null
    save: number | null
    created: Date | null
  }

  export type PlansMaxAggregateOutputType = {
    planId: number | null
    userId: number | null
    monthly: number | null
    save: number | null
    created: Date | null
  }

  export type PlansCountAggregateOutputType = {
    planId: number
    userId: number
    monthly: number
    save: number
    created: number
    _all: number
  }


  export type PlansAvgAggregateInputType = {
    planId?: true
    userId?: true
    monthly?: true
    save?: true
  }

  export type PlansSumAggregateInputType = {
    planId?: true
    userId?: true
    monthly?: true
    save?: true
  }

  export type PlansMinAggregateInputType = {
    planId?: true
    userId?: true
    monthly?: true
    save?: true
    created?: true
  }

  export type PlansMaxAggregateInputType = {
    planId?: true
    userId?: true
    monthly?: true
    save?: true
    created?: true
  }

  export type PlansCountAggregateInputType = {
    planId?: true
    userId?: true
    monthly?: true
    save?: true
    created?: true
    _all?: true
  }

  export type PlansAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which plans to aggregate.
     */
    where?: plansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plans to fetch.
     */
    orderBy?: plansOrderByWithRelationInput | plansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: plansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned plans
    **/
    _count?: true | PlansCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlansAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlansSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlansMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlansMaxAggregateInputType
  }

  export type GetPlansAggregateType<T extends PlansAggregateArgs> = {
        [P in keyof T & keyof AggregatePlans]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlans[P]>
      : GetScalarType<T[P], AggregatePlans[P]>
  }




  export type plansGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: plansWhereInput
    orderBy?: plansOrderByWithAggregationInput | plansOrderByWithAggregationInput[]
    by: PlansScalarFieldEnum[] | PlansScalarFieldEnum
    having?: plansScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlansCountAggregateInputType | true
    _avg?: PlansAvgAggregateInputType
    _sum?: PlansSumAggregateInputType
    _min?: PlansMinAggregateInputType
    _max?: PlansMaxAggregateInputType
  }

  export type PlansGroupByOutputType = {
    planId: number
    userId: number
    monthly: number
    save: number
    created: Date
    _count: PlansCountAggregateOutputType | null
    _avg: PlansAvgAggregateOutputType | null
    _sum: PlansSumAggregateOutputType | null
    _min: PlansMinAggregateOutputType | null
    _max: PlansMaxAggregateOutputType | null
  }

  type GetPlansGroupByPayload<T extends plansGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlansGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlansGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlansGroupByOutputType[P]>
            : GetScalarType<T[P], PlansGroupByOutputType[P]>
        }
      >
    >


  export type plansSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    planId?: boolean
    userId?: boolean
    monthly?: boolean
    save?: boolean
    created?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plans"]>

  export type plansSelectScalar = {
    planId?: boolean
    userId?: boolean
    monthly?: boolean
    save?: boolean
    created?: boolean
  }


  export type plansInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }


  export type $plansPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "plans"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      planId: number
      userId: number
      monthly: number
      save: number
      created: Date
    }, ExtArgs["result"]["plans"]>
    composites: {}
  }


  type plansGetPayload<S extends boolean | null | undefined | plansDefaultArgs> = $Result.GetResult<Prisma.$plansPayload, S>

  type plansCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<plansFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlansCountAggregateInputType | true
    }

  export interface plansDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['plans'], meta: { name: 'plans' } }
    /**
     * Find zero or one Plans that matches the filter.
     * @param {plansFindUniqueArgs} args - Arguments to find a Plans
     * @example
     * // Get one Plans
     * const plans = await prisma.plans.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends plansFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, plansFindUniqueArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Plans that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {plansFindUniqueOrThrowArgs} args - Arguments to find a Plans
     * @example
     * // Get one Plans
     * const plans = await prisma.plans.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends plansFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, plansFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plansFindFirstArgs} args - Arguments to find a Plans
     * @example
     * // Get one Plans
     * const plans = await prisma.plans.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends plansFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, plansFindFirstArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Plans that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plansFindFirstOrThrowArgs} args - Arguments to find a Plans
     * @example
     * // Get one Plans
     * const plans = await prisma.plans.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends plansFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, plansFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plansFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plans.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plans.findMany({ take: 10 })
     * 
     * // Only select the `planId`
     * const plansWithPlanIdOnly = await prisma.plans.findMany({ select: { planId: true } })
     * 
    **/
    findMany<T extends plansFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, plansFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Plans.
     * @param {plansCreateArgs} args - Arguments to create a Plans.
     * @example
     * // Create one Plans
     * const Plans = await prisma.plans.create({
     *   data: {
     *     // ... data to create a Plans
     *   }
     * })
     * 
    **/
    create<T extends plansCreateArgs<ExtArgs>>(
      args: SelectSubset<T, plansCreateArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Plans.
     *     @param {plansCreateManyArgs} args - Arguments to create many Plans.
     *     @example
     *     // Create many Plans
     *     const plans = await prisma.plans.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends plansCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, plansCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Plans.
     * @param {plansDeleteArgs} args - Arguments to delete one Plans.
     * @example
     * // Delete one Plans
     * const Plans = await prisma.plans.delete({
     *   where: {
     *     // ... filter to delete one Plans
     *   }
     * })
     * 
    **/
    delete<T extends plansDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, plansDeleteArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Plans.
     * @param {plansUpdateArgs} args - Arguments to update one Plans.
     * @example
     * // Update one Plans
     * const plans = await prisma.plans.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends plansUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, plansUpdateArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Plans.
     * @param {plansDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plans.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends plansDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, plansDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plansUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plans = await prisma.plans.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends plansUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, plansUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plans.
     * @param {plansUpsertArgs} args - Arguments to update or create a Plans.
     * @example
     * // Update or create a Plans
     * const plans = await prisma.plans.upsert({
     *   create: {
     *     // ... data to create a Plans
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plans we want to update
     *   }
     * })
    **/
    upsert<T extends plansUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, plansUpsertArgs<ExtArgs>>
    ): Prisma__plansClient<$Result.GetResult<Prisma.$plansPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plansCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plans.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends plansCountArgs>(
      args?: Subset<T, plansCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlansCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlansAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlansAggregateArgs>(args: Subset<T, PlansAggregateArgs>): Prisma.PrismaPromise<GetPlansAggregateType<T>>

    /**
     * Group by Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plansGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends plansGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: plansGroupByArgs['orderBy'] }
        : { orderBy?: plansGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, plansGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlansGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the plans model
   */
  readonly fields: plansFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for plans.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__plansClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the plans model
   */ 
  interface plansFieldRefs {
    readonly planId: FieldRef<"plans", 'Int'>
    readonly userId: FieldRef<"plans", 'Int'>
    readonly monthly: FieldRef<"plans", 'Float'>
    readonly save: FieldRef<"plans", 'Float'>
    readonly created: FieldRef<"plans", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * plans findUnique
   */
  export type plansFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * Filter, which plans to fetch.
     */
    where: plansWhereUniqueInput
  }

  /**
   * plans findUniqueOrThrow
   */
  export type plansFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * Filter, which plans to fetch.
     */
    where: plansWhereUniqueInput
  }

  /**
   * plans findFirst
   */
  export type plansFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * Filter, which plans to fetch.
     */
    where?: plansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plans to fetch.
     */
    orderBy?: plansOrderByWithRelationInput | plansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for plans.
     */
    cursor?: plansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of plans.
     */
    distinct?: PlansScalarFieldEnum | PlansScalarFieldEnum[]
  }

  /**
   * plans findFirstOrThrow
   */
  export type plansFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * Filter, which plans to fetch.
     */
    where?: plansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plans to fetch.
     */
    orderBy?: plansOrderByWithRelationInput | plansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for plans.
     */
    cursor?: plansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of plans.
     */
    distinct?: PlansScalarFieldEnum | PlansScalarFieldEnum[]
  }

  /**
   * plans findMany
   */
  export type plansFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * Filter, which plans to fetch.
     */
    where?: plansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plans to fetch.
     */
    orderBy?: plansOrderByWithRelationInput | plansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing plans.
     */
    cursor?: plansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plans.
     */
    skip?: number
    distinct?: PlansScalarFieldEnum | PlansScalarFieldEnum[]
  }

  /**
   * plans create
   */
  export type plansCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * The data needed to create a plans.
     */
    data: XOR<plansCreateInput, plansUncheckedCreateInput>
  }

  /**
   * plans createMany
   */
  export type plansCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many plans.
     */
    data: plansCreateManyInput | plansCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * plans update
   */
  export type plansUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * The data needed to update a plans.
     */
    data: XOR<plansUpdateInput, plansUncheckedUpdateInput>
    /**
     * Choose, which plans to update.
     */
    where: plansWhereUniqueInput
  }

  /**
   * plans updateMany
   */
  export type plansUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update plans.
     */
    data: XOR<plansUpdateManyMutationInput, plansUncheckedUpdateManyInput>
    /**
     * Filter which plans to update
     */
    where?: plansWhereInput
  }

  /**
   * plans upsert
   */
  export type plansUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * The filter to search for the plans to update in case it exists.
     */
    where: plansWhereUniqueInput
    /**
     * In case the plans found by the `where` argument doesn't exist, create a new plans with this data.
     */
    create: XOR<plansCreateInput, plansUncheckedCreateInput>
    /**
     * In case the plans was found with the provided `where` argument, update it with this data.
     */
    update: XOR<plansUpdateInput, plansUncheckedUpdateInput>
  }

  /**
   * plans delete
   */
  export type plansDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
    /**
     * Filter which plans to delete.
     */
    where: plansWhereUniqueInput
  }

  /**
   * plans deleteMany
   */
  export type plansDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which plans to delete
     */
    where?: plansWhereInput
  }

  /**
   * plans without action
   */
  export type plansDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plans
     */
    select?: plansSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plansInclude<ExtArgs> | null
  }


  /**
   * Model Bonus
   */

  export type AggregateBonus = {
    _count: BonusCountAggregateOutputType | null
    _avg: BonusAvgAggregateOutputType | null
    _sum: BonusSumAggregateOutputType | null
    _min: BonusMinAggregateOutputType | null
    _max: BonusMaxAggregateOutputType | null
  }

  export type BonusAvgAggregateOutputType = {
    bonusId: number | null
    userId: number | null
    amount: number | null
  }

  export type BonusSumAggregateOutputType = {
    bonusId: number | null
    userId: number | null
    amount: number | null
  }

  export type BonusMinAggregateOutputType = {
    bonusId: number | null
    userId: number | null
    usuage: $Enums.bonusUsage | null
    amount: number | null
    source: string | null
    created: Date | null
  }

  export type BonusMaxAggregateOutputType = {
    bonusId: number | null
    userId: number | null
    usuage: $Enums.bonusUsage | null
    amount: number | null
    source: string | null
    created: Date | null
  }

  export type BonusCountAggregateOutputType = {
    bonusId: number
    userId: number
    usuage: number
    amount: number
    source: number
    created: number
    _all: number
  }


  export type BonusAvgAggregateInputType = {
    bonusId?: true
    userId?: true
    amount?: true
  }

  export type BonusSumAggregateInputType = {
    bonusId?: true
    userId?: true
    amount?: true
  }

  export type BonusMinAggregateInputType = {
    bonusId?: true
    userId?: true
    usuage?: true
    amount?: true
    source?: true
    created?: true
  }

  export type BonusMaxAggregateInputType = {
    bonusId?: true
    userId?: true
    usuage?: true
    amount?: true
    source?: true
    created?: true
  }

  export type BonusCountAggregateInputType = {
    bonusId?: true
    userId?: true
    usuage?: true
    amount?: true
    source?: true
    created?: true
    _all?: true
  }

  export type BonusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bonus to aggregate.
     */
    where?: BonusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bonuses to fetch.
     */
    orderBy?: BonusOrderByWithRelationInput | BonusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BonusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bonuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bonuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bonuses
    **/
    _count?: true | BonusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BonusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BonusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BonusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BonusMaxAggregateInputType
  }

  export type GetBonusAggregateType<T extends BonusAggregateArgs> = {
        [P in keyof T & keyof AggregateBonus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBonus[P]>
      : GetScalarType<T[P], AggregateBonus[P]>
  }




  export type BonusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonusWhereInput
    orderBy?: BonusOrderByWithAggregationInput | BonusOrderByWithAggregationInput[]
    by: BonusScalarFieldEnum[] | BonusScalarFieldEnum
    having?: BonusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BonusCountAggregateInputType | true
    _avg?: BonusAvgAggregateInputType
    _sum?: BonusSumAggregateInputType
    _min?: BonusMinAggregateInputType
    _max?: BonusMaxAggregateInputType
  }

  export type BonusGroupByOutputType = {
    bonusId: number
    userId: number
    usuage: $Enums.bonusUsage
    amount: number
    source: string
    created: Date
    _count: BonusCountAggregateOutputType | null
    _avg: BonusAvgAggregateOutputType | null
    _sum: BonusSumAggregateOutputType | null
    _min: BonusMinAggregateOutputType | null
    _max: BonusMaxAggregateOutputType | null
  }

  type GetBonusGroupByPayload<T extends BonusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BonusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BonusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BonusGroupByOutputType[P]>
            : GetScalarType<T[P], BonusGroupByOutputType[P]>
        }
      >
    >


  export type BonusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bonusId?: boolean
    userId?: boolean
    usuage?: boolean
    amount?: boolean
    source?: boolean
    created?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bonus"]>

  export type BonusSelectScalar = {
    bonusId?: boolean
    userId?: boolean
    usuage?: boolean
    amount?: boolean
    source?: boolean
    created?: boolean
  }


  export type BonusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }


  export type $BonusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bonus"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      bonusId: number
      userId: number
      usuage: $Enums.bonusUsage
      amount: number
      source: string
      created: Date
    }, ExtArgs["result"]["bonus"]>
    composites: {}
  }


  type BonusGetPayload<S extends boolean | null | undefined | BonusDefaultArgs> = $Result.GetResult<Prisma.$BonusPayload, S>

  type BonusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BonusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BonusCountAggregateInputType | true
    }

  export interface BonusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bonus'], meta: { name: 'Bonus' } }
    /**
     * Find zero or one Bonus that matches the filter.
     * @param {BonusFindUniqueArgs} args - Arguments to find a Bonus
     * @example
     * // Get one Bonus
     * const bonus = await prisma.bonus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BonusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BonusFindUniqueArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bonus that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BonusFindUniqueOrThrowArgs} args - Arguments to find a Bonus
     * @example
     * // Get one Bonus
     * const bonus = await prisma.bonus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BonusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BonusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bonus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusFindFirstArgs} args - Arguments to find a Bonus
     * @example
     * // Get one Bonus
     * const bonus = await prisma.bonus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BonusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BonusFindFirstArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bonus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusFindFirstOrThrowArgs} args - Arguments to find a Bonus
     * @example
     * // Get one Bonus
     * const bonus = await prisma.bonus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BonusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BonusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bonuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bonuses
     * const bonuses = await prisma.bonus.findMany()
     * 
     * // Get first 10 Bonuses
     * const bonuses = await prisma.bonus.findMany({ take: 10 })
     * 
     * // Only select the `bonusId`
     * const bonusWithBonusIdOnly = await prisma.bonus.findMany({ select: { bonusId: true } })
     * 
    **/
    findMany<T extends BonusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BonusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bonus.
     * @param {BonusCreateArgs} args - Arguments to create a Bonus.
     * @example
     * // Create one Bonus
     * const Bonus = await prisma.bonus.create({
     *   data: {
     *     // ... data to create a Bonus
     *   }
     * })
     * 
    **/
    create<T extends BonusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BonusCreateArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bonuses.
     *     @param {BonusCreateManyArgs} args - Arguments to create many Bonuses.
     *     @example
     *     // Create many Bonuses
     *     const bonus = await prisma.bonus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BonusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BonusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bonus.
     * @param {BonusDeleteArgs} args - Arguments to delete one Bonus.
     * @example
     * // Delete one Bonus
     * const Bonus = await prisma.bonus.delete({
     *   where: {
     *     // ... filter to delete one Bonus
     *   }
     * })
     * 
    **/
    delete<T extends BonusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BonusDeleteArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bonus.
     * @param {BonusUpdateArgs} args - Arguments to update one Bonus.
     * @example
     * // Update one Bonus
     * const bonus = await prisma.bonus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BonusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BonusUpdateArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bonuses.
     * @param {BonusDeleteManyArgs} args - Arguments to filter Bonuses to delete.
     * @example
     * // Delete a few Bonuses
     * const { count } = await prisma.bonus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BonusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BonusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bonuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bonuses
     * const bonus = await prisma.bonus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BonusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BonusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bonus.
     * @param {BonusUpsertArgs} args - Arguments to update or create a Bonus.
     * @example
     * // Update or create a Bonus
     * const bonus = await prisma.bonus.upsert({
     *   create: {
     *     // ... data to create a Bonus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bonus we want to update
     *   }
     * })
    **/
    upsert<T extends BonusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BonusUpsertArgs<ExtArgs>>
    ): Prisma__BonusClient<$Result.GetResult<Prisma.$BonusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bonuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusCountArgs} args - Arguments to filter Bonuses to count.
     * @example
     * // Count the number of Bonuses
     * const count = await prisma.bonus.count({
     *   where: {
     *     // ... the filter for the Bonuses we want to count
     *   }
     * })
    **/
    count<T extends BonusCountArgs>(
      args?: Subset<T, BonusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BonusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bonus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BonusAggregateArgs>(args: Subset<T, BonusAggregateArgs>): Prisma.PrismaPromise<GetBonusAggregateType<T>>

    /**
     * Group by Bonus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BonusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BonusGroupByArgs['orderBy'] }
        : { orderBy?: BonusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BonusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBonusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bonus model
   */
  readonly fields: BonusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bonus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BonusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bonus model
   */ 
  interface BonusFieldRefs {
    readonly bonusId: FieldRef<"Bonus", 'Int'>
    readonly userId: FieldRef<"Bonus", 'Int'>
    readonly usuage: FieldRef<"Bonus", 'bonusUsage'>
    readonly amount: FieldRef<"Bonus", 'Int'>
    readonly source: FieldRef<"Bonus", 'String'>
    readonly created: FieldRef<"Bonus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bonus findUnique
   */
  export type BonusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * Filter, which Bonus to fetch.
     */
    where: BonusWhereUniqueInput
  }

  /**
   * Bonus findUniqueOrThrow
   */
  export type BonusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * Filter, which Bonus to fetch.
     */
    where: BonusWhereUniqueInput
  }

  /**
   * Bonus findFirst
   */
  export type BonusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * Filter, which Bonus to fetch.
     */
    where?: BonusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bonuses to fetch.
     */
    orderBy?: BonusOrderByWithRelationInput | BonusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bonuses.
     */
    cursor?: BonusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bonuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bonuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bonuses.
     */
    distinct?: BonusScalarFieldEnum | BonusScalarFieldEnum[]
  }

  /**
   * Bonus findFirstOrThrow
   */
  export type BonusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * Filter, which Bonus to fetch.
     */
    where?: BonusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bonuses to fetch.
     */
    orderBy?: BonusOrderByWithRelationInput | BonusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bonuses.
     */
    cursor?: BonusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bonuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bonuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bonuses.
     */
    distinct?: BonusScalarFieldEnum | BonusScalarFieldEnum[]
  }

  /**
   * Bonus findMany
   */
  export type BonusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * Filter, which Bonuses to fetch.
     */
    where?: BonusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bonuses to fetch.
     */
    orderBy?: BonusOrderByWithRelationInput | BonusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bonuses.
     */
    cursor?: BonusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bonuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bonuses.
     */
    skip?: number
    distinct?: BonusScalarFieldEnum | BonusScalarFieldEnum[]
  }

  /**
   * Bonus create
   */
  export type BonusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * The data needed to create a Bonus.
     */
    data: XOR<BonusCreateInput, BonusUncheckedCreateInput>
  }

  /**
   * Bonus createMany
   */
  export type BonusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bonuses.
     */
    data: BonusCreateManyInput | BonusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bonus update
   */
  export type BonusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * The data needed to update a Bonus.
     */
    data: XOR<BonusUpdateInput, BonusUncheckedUpdateInput>
    /**
     * Choose, which Bonus to update.
     */
    where: BonusWhereUniqueInput
  }

  /**
   * Bonus updateMany
   */
  export type BonusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bonuses.
     */
    data: XOR<BonusUpdateManyMutationInput, BonusUncheckedUpdateManyInput>
    /**
     * Filter which Bonuses to update
     */
    where?: BonusWhereInput
  }

  /**
   * Bonus upsert
   */
  export type BonusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * The filter to search for the Bonus to update in case it exists.
     */
    where: BonusWhereUniqueInput
    /**
     * In case the Bonus found by the `where` argument doesn't exist, create a new Bonus with this data.
     */
    create: XOR<BonusCreateInput, BonusUncheckedCreateInput>
    /**
     * In case the Bonus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BonusUpdateInput, BonusUncheckedUpdateInput>
  }

  /**
   * Bonus delete
   */
  export type BonusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
    /**
     * Filter which Bonus to delete.
     */
    where: BonusWhereUniqueInput
  }

  /**
   * Bonus deleteMany
   */
  export type BonusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bonuses to delete
     */
    where?: BonusWhereInput
  }

  /**
   * Bonus without action
   */
  export type BonusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bonus
     */
    select?: BonusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    userId: 'userId',
    username: 'username',
    password: 'password',
    image: 'image',
    created: 'created'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    transactionId: 'transactionId',
    userId: 'userId',
    categoryId: 'categoryId',
    type: 'type',
    amount: 'amount',
    created: 'created'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    categoryId: 'categoryId',
    name: 'name',
    iconId: 'iconId'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const CategoriesIconScalarFieldEnum: {
    iconId: 'iconId',
    iconName: 'iconName'
  };

  export type CategoriesIconScalarFieldEnum = (typeof CategoriesIconScalarFieldEnum)[keyof typeof CategoriesIconScalarFieldEnum]


  export const UserCategoriesScalarFieldEnum: {
    userId: 'userId',
    categoryId: 'categoryId'
  };

  export type UserCategoriesScalarFieldEnum = (typeof UserCategoriesScalarFieldEnum)[keyof typeof UserCategoriesScalarFieldEnum]


  export const GoalsScalarFieldEnum: {
    goalId: 'goalId',
    userId: 'userId',
    name: 'name',
    goalAmount: 'goalAmount',
    currentAmount: 'currentAmount',
    created: 'created'
  };

  export type GoalsScalarFieldEnum = (typeof GoalsScalarFieldEnum)[keyof typeof GoalsScalarFieldEnum]


  export const PlansScalarFieldEnum: {
    planId: 'planId',
    userId: 'userId',
    monthly: 'monthly',
    save: 'save',
    created: 'created'
  };

  export type PlansScalarFieldEnum = (typeof PlansScalarFieldEnum)[keyof typeof PlansScalarFieldEnum]


  export const BonusScalarFieldEnum: {
    bonusId: 'bonusId',
    userId: 'userId',
    usuage: 'usuage',
    amount: 'amount',
    source: 'source',
    created: 'created'
  };

  export type BonusScalarFieldEnum = (typeof BonusScalarFieldEnum)[keyof typeof BonusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'transactionsType'
   */
  export type EnumtransactionsTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transactionsType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'bonusUsage'
   */
  export type EnumbonusUsageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'bonusUsage'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    userId?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    image?: StringNullableFilter<"users"> | string | null
    created?: DateTimeFilter<"users"> | Date | string
    transactions?: TransactionsListRelationFilter
    goals?: GoalsListRelationFilter
    plans?: PlansListRelationFilter
    Bonus?: BonusListRelationFilter
    userCategories?: UserCategoriesListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    created?: SortOrder
    transactions?: transactionsOrderByRelationAggregateInput
    goals?: goalsOrderByRelationAggregateInput
    plans?: plansOrderByRelationAggregateInput
    Bonus?: BonusOrderByRelationAggregateInput
    userCategories?: userCategoriesOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    image?: StringNullableFilter<"users"> | string | null
    created?: DateTimeFilter<"users"> | Date | string
    transactions?: TransactionsListRelationFilter
    goals?: GoalsListRelationFilter
    plans?: PlansListRelationFilter
    Bonus?: BonusListRelationFilter
    userCategories?: UserCategoriesListRelationFilter
  }, "userId" | "username">

  export type usersOrderByWithAggregationInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    created?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    image?: StringNullableWithAggregatesFilter<"users"> | string | null
    created?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type transactionsWhereInput = {
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    transactionId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
    categoryId?: IntFilter<"transactions"> | number
    type?: EnumtransactionsTypeFilter<"transactions"> | $Enums.transactionsType
    amount?: FloatFilter<"transactions"> | number
    created?: DateTimeFilter<"transactions"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
  }

  export type transactionsOrderByWithRelationInput = {
    transactionId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    created?: SortOrder
    users?: usersOrderByWithRelationInput
    categories?: categoriesOrderByWithRelationInput
  }

  export type transactionsWhereUniqueInput = Prisma.AtLeast<{
    transactionId?: number
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    userId?: IntFilter<"transactions"> | number
    categoryId?: IntFilter<"transactions"> | number
    type?: EnumtransactionsTypeFilter<"transactions"> | $Enums.transactionsType
    amount?: FloatFilter<"transactions"> | number
    created?: DateTimeFilter<"transactions"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    categories?: XOR<CategoriesNullableRelationFilter, categoriesWhereInput> | null
  }, "transactionId">

  export type transactionsOrderByWithAggregationInput = {
    transactionId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    created?: SortOrder
    _count?: transactionsCountOrderByAggregateInput
    _avg?: transactionsAvgOrderByAggregateInput
    _max?: transactionsMaxOrderByAggregateInput
    _min?: transactionsMinOrderByAggregateInput
    _sum?: transactionsSumOrderByAggregateInput
  }

  export type transactionsScalarWhereWithAggregatesInput = {
    AND?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    OR?: transactionsScalarWhereWithAggregatesInput[]
    NOT?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    transactionId?: IntWithAggregatesFilter<"transactions"> | number
    userId?: IntWithAggregatesFilter<"transactions"> | number
    categoryId?: IntWithAggregatesFilter<"transactions"> | number
    type?: EnumtransactionsTypeWithAggregatesFilter<"transactions"> | $Enums.transactionsType
    amount?: FloatWithAggregatesFilter<"transactions"> | number
    created?: DateTimeWithAggregatesFilter<"transactions"> | Date | string
  }

  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    categoryId?: IntFilter<"categories"> | number
    name?: StringFilter<"categories"> | string
    iconId?: IntFilter<"categories"> | number
    icon?: XOR<CategoriesIconRelationFilter, categoriesIconWhereInput>
    transactions?: TransactionsListRelationFilter
    userCategories?: UserCategoriesListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    categoryId?: SortOrder
    name?: SortOrder
    iconId?: SortOrder
    icon?: categoriesIconOrderByWithRelationInput
    transactions?: transactionsOrderByRelationAggregateInput
    userCategories?: userCategoriesOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    categoryId?: number
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    name?: StringFilter<"categories"> | string
    iconId?: IntFilter<"categories"> | number
    icon?: XOR<CategoriesIconRelationFilter, categoriesIconWhereInput>
    transactions?: TransactionsListRelationFilter
    userCategories?: UserCategoriesListRelationFilter
  }, "categoryId">

  export type categoriesOrderByWithAggregationInput = {
    categoryId?: SortOrder
    name?: SortOrder
    iconId?: SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    categoryId?: IntWithAggregatesFilter<"categories"> | number
    name?: StringWithAggregatesFilter<"categories"> | string
    iconId?: IntWithAggregatesFilter<"categories"> | number
  }

  export type categoriesIconWhereInput = {
    AND?: categoriesIconWhereInput | categoriesIconWhereInput[]
    OR?: categoriesIconWhereInput[]
    NOT?: categoriesIconWhereInput | categoriesIconWhereInput[]
    iconId?: IntFilter<"categoriesIcon"> | number
    iconName?: StringFilter<"categoriesIcon"> | string
    categories?: CategoriesListRelationFilter
  }

  export type categoriesIconOrderByWithRelationInput = {
    iconId?: SortOrder
    iconName?: SortOrder
    categories?: categoriesOrderByRelationAggregateInput
  }

  export type categoriesIconWhereUniqueInput = Prisma.AtLeast<{
    iconId?: number
    AND?: categoriesIconWhereInput | categoriesIconWhereInput[]
    OR?: categoriesIconWhereInput[]
    NOT?: categoriesIconWhereInput | categoriesIconWhereInput[]
    iconName?: StringFilter<"categoriesIcon"> | string
    categories?: CategoriesListRelationFilter
  }, "iconId">

  export type categoriesIconOrderByWithAggregationInput = {
    iconId?: SortOrder
    iconName?: SortOrder
    _count?: categoriesIconCountOrderByAggregateInput
    _avg?: categoriesIconAvgOrderByAggregateInput
    _max?: categoriesIconMaxOrderByAggregateInput
    _min?: categoriesIconMinOrderByAggregateInput
    _sum?: categoriesIconSumOrderByAggregateInput
  }

  export type categoriesIconScalarWhereWithAggregatesInput = {
    AND?: categoriesIconScalarWhereWithAggregatesInput | categoriesIconScalarWhereWithAggregatesInput[]
    OR?: categoriesIconScalarWhereWithAggregatesInput[]
    NOT?: categoriesIconScalarWhereWithAggregatesInput | categoriesIconScalarWhereWithAggregatesInput[]
    iconId?: IntWithAggregatesFilter<"categoriesIcon"> | number
    iconName?: StringWithAggregatesFilter<"categoriesIcon"> | string
  }

  export type userCategoriesWhereInput = {
    AND?: userCategoriesWhereInput | userCategoriesWhereInput[]
    OR?: userCategoriesWhereInput[]
    NOT?: userCategoriesWhereInput | userCategoriesWhereInput[]
    userId?: IntFilter<"userCategories"> | number
    categoryId?: IntFilter<"userCategories"> | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    categories?: XOR<CategoriesRelationFilter, categoriesWhereInput>
  }

  export type userCategoriesOrderByWithRelationInput = {
    userId?: SortOrder
    categoryId?: SortOrder
    users?: usersOrderByWithRelationInput
    categories?: categoriesOrderByWithRelationInput
  }

  export type userCategoriesWhereUniqueInput = Prisma.AtLeast<{
    userId_categoryId?: userCategoriesUserIdCategoryIdCompoundUniqueInput
    AND?: userCategoriesWhereInput | userCategoriesWhereInput[]
    OR?: userCategoriesWhereInput[]
    NOT?: userCategoriesWhereInput | userCategoriesWhereInput[]
    userId?: IntFilter<"userCategories"> | number
    categoryId?: IntFilter<"userCategories"> | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    categories?: XOR<CategoriesRelationFilter, categoriesWhereInput>
  }, "userId_categoryId">

  export type userCategoriesOrderByWithAggregationInput = {
    userId?: SortOrder
    categoryId?: SortOrder
    _count?: userCategoriesCountOrderByAggregateInput
    _avg?: userCategoriesAvgOrderByAggregateInput
    _max?: userCategoriesMaxOrderByAggregateInput
    _min?: userCategoriesMinOrderByAggregateInput
    _sum?: userCategoriesSumOrderByAggregateInput
  }

  export type userCategoriesScalarWhereWithAggregatesInput = {
    AND?: userCategoriesScalarWhereWithAggregatesInput | userCategoriesScalarWhereWithAggregatesInput[]
    OR?: userCategoriesScalarWhereWithAggregatesInput[]
    NOT?: userCategoriesScalarWhereWithAggregatesInput | userCategoriesScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"userCategories"> | number
    categoryId?: IntWithAggregatesFilter<"userCategories"> | number
  }

  export type goalsWhereInput = {
    AND?: goalsWhereInput | goalsWhereInput[]
    OR?: goalsWhereInput[]
    NOT?: goalsWhereInput | goalsWhereInput[]
    goalId?: IntFilter<"goals"> | number
    userId?: IntFilter<"goals"> | number
    name?: StringNullableFilter<"goals"> | string | null
    goalAmount?: IntFilter<"goals"> | number
    currentAmount?: IntNullableFilter<"goals"> | number | null
    created?: DateTimeFilter<"goals"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type goalsOrderByWithRelationInput = {
    goalId?: SortOrder
    userId?: SortOrder
    name?: SortOrderInput | SortOrder
    goalAmount?: SortOrder
    currentAmount?: SortOrderInput | SortOrder
    created?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type goalsWhereUniqueInput = Prisma.AtLeast<{
    goalId?: number
    AND?: goalsWhereInput | goalsWhereInput[]
    OR?: goalsWhereInput[]
    NOT?: goalsWhereInput | goalsWhereInput[]
    userId?: IntFilter<"goals"> | number
    name?: StringNullableFilter<"goals"> | string | null
    goalAmount?: IntFilter<"goals"> | number
    currentAmount?: IntNullableFilter<"goals"> | number | null
    created?: DateTimeFilter<"goals"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "goalId">

  export type goalsOrderByWithAggregationInput = {
    goalId?: SortOrder
    userId?: SortOrder
    name?: SortOrderInput | SortOrder
    goalAmount?: SortOrder
    currentAmount?: SortOrderInput | SortOrder
    created?: SortOrder
    _count?: goalsCountOrderByAggregateInput
    _avg?: goalsAvgOrderByAggregateInput
    _max?: goalsMaxOrderByAggregateInput
    _min?: goalsMinOrderByAggregateInput
    _sum?: goalsSumOrderByAggregateInput
  }

  export type goalsScalarWhereWithAggregatesInput = {
    AND?: goalsScalarWhereWithAggregatesInput | goalsScalarWhereWithAggregatesInput[]
    OR?: goalsScalarWhereWithAggregatesInput[]
    NOT?: goalsScalarWhereWithAggregatesInput | goalsScalarWhereWithAggregatesInput[]
    goalId?: IntWithAggregatesFilter<"goals"> | number
    userId?: IntWithAggregatesFilter<"goals"> | number
    name?: StringNullableWithAggregatesFilter<"goals"> | string | null
    goalAmount?: IntWithAggregatesFilter<"goals"> | number
    currentAmount?: IntNullableWithAggregatesFilter<"goals"> | number | null
    created?: DateTimeWithAggregatesFilter<"goals"> | Date | string
  }

  export type plansWhereInput = {
    AND?: plansWhereInput | plansWhereInput[]
    OR?: plansWhereInput[]
    NOT?: plansWhereInput | plansWhereInput[]
    planId?: IntFilter<"plans"> | number
    userId?: IntFilter<"plans"> | number
    monthly?: FloatFilter<"plans"> | number
    save?: FloatFilter<"plans"> | number
    created?: DateTimeFilter<"plans"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type plansOrderByWithRelationInput = {
    planId?: SortOrder
    userId?: SortOrder
    monthly?: SortOrder
    save?: SortOrder
    created?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type plansWhereUniqueInput = Prisma.AtLeast<{
    planId?: number
    AND?: plansWhereInput | plansWhereInput[]
    OR?: plansWhereInput[]
    NOT?: plansWhereInput | plansWhereInput[]
    userId?: IntFilter<"plans"> | number
    monthly?: FloatFilter<"plans"> | number
    save?: FloatFilter<"plans"> | number
    created?: DateTimeFilter<"plans"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "planId">

  export type plansOrderByWithAggregationInput = {
    planId?: SortOrder
    userId?: SortOrder
    monthly?: SortOrder
    save?: SortOrder
    created?: SortOrder
    _count?: plansCountOrderByAggregateInput
    _avg?: plansAvgOrderByAggregateInput
    _max?: plansMaxOrderByAggregateInput
    _min?: plansMinOrderByAggregateInput
    _sum?: plansSumOrderByAggregateInput
  }

  export type plansScalarWhereWithAggregatesInput = {
    AND?: plansScalarWhereWithAggregatesInput | plansScalarWhereWithAggregatesInput[]
    OR?: plansScalarWhereWithAggregatesInput[]
    NOT?: plansScalarWhereWithAggregatesInput | plansScalarWhereWithAggregatesInput[]
    planId?: IntWithAggregatesFilter<"plans"> | number
    userId?: IntWithAggregatesFilter<"plans"> | number
    monthly?: FloatWithAggregatesFilter<"plans"> | number
    save?: FloatWithAggregatesFilter<"plans"> | number
    created?: DateTimeWithAggregatesFilter<"plans"> | Date | string
  }

  export type BonusWhereInput = {
    AND?: BonusWhereInput | BonusWhereInput[]
    OR?: BonusWhereInput[]
    NOT?: BonusWhereInput | BonusWhereInput[]
    bonusId?: IntFilter<"Bonus"> | number
    userId?: IntFilter<"Bonus"> | number
    usuage?: EnumbonusUsageFilter<"Bonus"> | $Enums.bonusUsage
    amount?: IntFilter<"Bonus"> | number
    source?: StringFilter<"Bonus"> | string
    created?: DateTimeFilter<"Bonus"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type BonusOrderByWithRelationInput = {
    bonusId?: SortOrder
    userId?: SortOrder
    usuage?: SortOrder
    amount?: SortOrder
    source?: SortOrder
    created?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type BonusWhereUniqueInput = Prisma.AtLeast<{
    bonusId?: number
    AND?: BonusWhereInput | BonusWhereInput[]
    OR?: BonusWhereInput[]
    NOT?: BonusWhereInput | BonusWhereInput[]
    userId?: IntFilter<"Bonus"> | number
    usuage?: EnumbonusUsageFilter<"Bonus"> | $Enums.bonusUsage
    amount?: IntFilter<"Bonus"> | number
    source?: StringFilter<"Bonus"> | string
    created?: DateTimeFilter<"Bonus"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "bonusId">

  export type BonusOrderByWithAggregationInput = {
    bonusId?: SortOrder
    userId?: SortOrder
    usuage?: SortOrder
    amount?: SortOrder
    source?: SortOrder
    created?: SortOrder
    _count?: BonusCountOrderByAggregateInput
    _avg?: BonusAvgOrderByAggregateInput
    _max?: BonusMaxOrderByAggregateInput
    _min?: BonusMinOrderByAggregateInput
    _sum?: BonusSumOrderByAggregateInput
  }

  export type BonusScalarWhereWithAggregatesInput = {
    AND?: BonusScalarWhereWithAggregatesInput | BonusScalarWhereWithAggregatesInput[]
    OR?: BonusScalarWhereWithAggregatesInput[]
    NOT?: BonusScalarWhereWithAggregatesInput | BonusScalarWhereWithAggregatesInput[]
    bonusId?: IntWithAggregatesFilter<"Bonus"> | number
    userId?: IntWithAggregatesFilter<"Bonus"> | number
    usuage?: EnumbonusUsageWithAggregatesFilter<"Bonus"> | $Enums.bonusUsage
    amount?: IntWithAggregatesFilter<"Bonus"> | number
    source?: StringWithAggregatesFilter<"Bonus"> | string
    created?: DateTimeWithAggregatesFilter<"Bonus"> | Date | string
  }

  export type usersCreateInput = {
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsCreateNestedManyWithoutUsersInput
    goals?: goalsCreateNestedManyWithoutUsersInput
    plans?: plansCreateNestedManyWithoutUsersInput
    Bonus?: BonusCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    userId?: number
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsUncheckedCreateNestedManyWithoutUsersInput
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    plans?: plansUncheckedCreateNestedManyWithoutUsersInput
    Bonus?: BonusUncheckedCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUpdateManyWithoutUsersNestedInput
    goals?: goalsUpdateManyWithoutUsersNestedInput
    plans?: plansUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUncheckedUpdateManyWithoutUsersNestedInput
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    plans?: plansUncheckedUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUncheckedUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    userId?: number
    username: string
    password: string
    image?: string | null
    created?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsCreateInput = {
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
    users: usersCreateNestedOneWithoutTransactionsInput
    categories?: categoriesCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateInput = {
    transactionId?: number
    userId: number
    categoryId: number
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
  }

  export type transactionsUpdateInput = {
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutTransactionsNestedInput
    categories?: categoriesUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateInput = {
    transactionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsCreateManyInput = {
    transactionId?: number
    userId: number
    categoryId: number
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
  }

  export type transactionsUpdateManyMutationInput = {
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsUncheckedUpdateManyInput = {
    transactionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriesCreateInput = {
    name: string
    icon: categoriesIconCreateNestedOneWithoutCategoriesInput
    transactions?: transactionsCreateNestedManyWithoutCategoriesInput
    userCategories?: userCategoriesCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateInput = {
    categoryId?: number
    name: string
    iconId: number
    transactions?: transactionsUncheckedCreateNestedManyWithoutCategoriesInput
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: categoriesIconUpdateOneRequiredWithoutCategoriesNestedInput
    transactions?: transactionsUpdateManyWithoutCategoriesNestedInput
    userCategories?: userCategoriesUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    iconId?: IntFieldUpdateOperationsInput | number
    transactions?: transactionsUncheckedUpdateManyWithoutCategoriesNestedInput
    userCategories?: userCategoriesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesCreateManyInput = {
    categoryId?: number
    name: string
    iconId: number
  }

  export type categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateManyInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    iconId?: IntFieldUpdateOperationsInput | number
  }

  export type categoriesIconCreateInput = {
    iconName: string
    categories?: categoriesCreateNestedManyWithoutIconInput
  }

  export type categoriesIconUncheckedCreateInput = {
    iconId?: number
    iconName: string
    categories?: categoriesUncheckedCreateNestedManyWithoutIconInput
  }

  export type categoriesIconUpdateInput = {
    iconName?: StringFieldUpdateOperationsInput | string
    categories?: categoriesUpdateManyWithoutIconNestedInput
  }

  export type categoriesIconUncheckedUpdateInput = {
    iconId?: IntFieldUpdateOperationsInput | number
    iconName?: StringFieldUpdateOperationsInput | string
    categories?: categoriesUncheckedUpdateManyWithoutIconNestedInput
  }

  export type categoriesIconCreateManyInput = {
    iconId?: number
    iconName: string
  }

  export type categoriesIconUpdateManyMutationInput = {
    iconName?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesIconUncheckedUpdateManyInput = {
    iconId?: IntFieldUpdateOperationsInput | number
    iconName?: StringFieldUpdateOperationsInput | string
  }

  export type userCategoriesCreateInput = {
    users: usersCreateNestedOneWithoutUserCategoriesInput
    categories: categoriesCreateNestedOneWithoutUserCategoriesInput
  }

  export type userCategoriesUncheckedCreateInput = {
    userId: number
    categoryId: number
  }

  export type userCategoriesUpdateInput = {
    users?: usersUpdateOneRequiredWithoutUserCategoriesNestedInput
    categories?: categoriesUpdateOneRequiredWithoutUserCategoriesNestedInput
  }

  export type userCategoriesUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type userCategoriesCreateManyInput = {
    userId: number
    categoryId: number
  }

  export type userCategoriesUpdateManyMutationInput = {

  }

  export type userCategoriesUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type goalsCreateInput = {
    name?: string | null
    goalAmount: number
    currentAmount?: number | null
    created?: Date | string
    users: usersCreateNestedOneWithoutGoalsInput
  }

  export type goalsUncheckedCreateInput = {
    goalId?: number
    userId: number
    name?: string | null
    goalAmount: number
    currentAmount?: number | null
    created?: Date | string
  }

  export type goalsUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    goalAmount?: IntFieldUpdateOperationsInput | number
    currentAmount?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type goalsUncheckedUpdateInput = {
    goalId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    goalAmount?: IntFieldUpdateOperationsInput | number
    currentAmount?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type goalsCreateManyInput = {
    goalId?: number
    userId: number
    name?: string | null
    goalAmount: number
    currentAmount?: number | null
    created?: Date | string
  }

  export type goalsUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    goalAmount?: IntFieldUpdateOperationsInput | number
    currentAmount?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type goalsUncheckedUpdateManyInput = {
    goalId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    goalAmount?: IntFieldUpdateOperationsInput | number
    currentAmount?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type plansCreateInput = {
    monthly: number
    save: number
    created?: Date | string
    users: usersCreateNestedOneWithoutPlansInput
  }

  export type plansUncheckedCreateInput = {
    planId?: number
    userId: number
    monthly: number
    save: number
    created?: Date | string
  }

  export type plansUpdateInput = {
    monthly?: FloatFieldUpdateOperationsInput | number
    save?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutPlansNestedInput
  }

  export type plansUncheckedUpdateInput = {
    planId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    monthly?: FloatFieldUpdateOperationsInput | number
    save?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type plansCreateManyInput = {
    planId?: number
    userId: number
    monthly: number
    save: number
    created?: Date | string
  }

  export type plansUpdateManyMutationInput = {
    monthly?: FloatFieldUpdateOperationsInput | number
    save?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type plansUncheckedUpdateManyInput = {
    planId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    monthly?: FloatFieldUpdateOperationsInput | number
    save?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BonusCreateInput = {
    usuage: $Enums.bonusUsage
    amount: number
    source: string
    created?: Date | string
    users: usersCreateNestedOneWithoutBonusInput
  }

  export type BonusUncheckedCreateInput = {
    bonusId?: number
    userId: number
    usuage: $Enums.bonusUsage
    amount: number
    source: string
    created?: Date | string
  }

  export type BonusUpdateInput = {
    usuage?: EnumbonusUsageFieldUpdateOperationsInput | $Enums.bonusUsage
    amount?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutBonusNestedInput
  }

  export type BonusUncheckedUpdateInput = {
    bonusId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    usuage?: EnumbonusUsageFieldUpdateOperationsInput | $Enums.bonusUsage
    amount?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BonusCreateManyInput = {
    bonusId?: number
    userId: number
    usuage: $Enums.bonusUsage
    amount: number
    source: string
    created?: Date | string
  }

  export type BonusUpdateManyMutationInput = {
    usuage?: EnumbonusUsageFieldUpdateOperationsInput | $Enums.bonusUsage
    amount?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BonusUncheckedUpdateManyInput = {
    bonusId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    usuage?: EnumbonusUsageFieldUpdateOperationsInput | $Enums.bonusUsage
    amount?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TransactionsListRelationFilter = {
    every?: transactionsWhereInput
    some?: transactionsWhereInput
    none?: transactionsWhereInput
  }

  export type GoalsListRelationFilter = {
    every?: goalsWhereInput
    some?: goalsWhereInput
    none?: goalsWhereInput
  }

  export type PlansListRelationFilter = {
    every?: plansWhereInput
    some?: plansWhereInput
    none?: plansWhereInput
  }

  export type BonusListRelationFilter = {
    every?: BonusWhereInput
    some?: BonusWhereInput
    none?: BonusWhereInput
  }

  export type UserCategoriesListRelationFilter = {
    every?: userCategoriesWhereInput
    some?: userCategoriesWhereInput
    none?: userCategoriesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type transactionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type goalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type plansOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BonusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCategoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    image?: SortOrder
    created?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    image?: SortOrder
    created?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    image?: SortOrder
    created?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumtransactionsTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionsType | EnumtransactionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.transactionsType[]
    notIn?: $Enums.transactionsType[]
    not?: NestedEnumtransactionsTypeFilter<$PrismaModel> | $Enums.transactionsType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type CategoriesNullableRelationFilter = {
    is?: categoriesWhereInput | null
    isNot?: categoriesWhereInput | null
  }

  export type transactionsCountOrderByAggregateInput = {
    transactionId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    created?: SortOrder
  }

  export type transactionsAvgOrderByAggregateInput = {
    transactionId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    amount?: SortOrder
  }

  export type transactionsMaxOrderByAggregateInput = {
    transactionId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    created?: SortOrder
  }

  export type transactionsMinOrderByAggregateInput = {
    transactionId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    created?: SortOrder
  }

  export type transactionsSumOrderByAggregateInput = {
    transactionId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    amount?: SortOrder
  }

  export type EnumtransactionsTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionsType | EnumtransactionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.transactionsType[]
    notIn?: $Enums.transactionsType[]
    not?: NestedEnumtransactionsTypeWithAggregatesFilter<$PrismaModel> | $Enums.transactionsType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransactionsTypeFilter<$PrismaModel>
    _max?: NestedEnumtransactionsTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CategoriesIconRelationFilter = {
    is?: categoriesIconWhereInput
    isNot?: categoriesIconWhereInput
  }

  export type categoriesCountOrderByAggregateInput = {
    categoryId?: SortOrder
    name?: SortOrder
    iconId?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    categoryId?: SortOrder
    iconId?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    categoryId?: SortOrder
    name?: SortOrder
    iconId?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    categoryId?: SortOrder
    name?: SortOrder
    iconId?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    categoryId?: SortOrder
    iconId?: SortOrder
  }

  export type CategoriesListRelationFilter = {
    every?: categoriesWhereInput
    some?: categoriesWhereInput
    none?: categoriesWhereInput
  }

  export type categoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesIconCountOrderByAggregateInput = {
    iconId?: SortOrder
    iconName?: SortOrder
  }

  export type categoriesIconAvgOrderByAggregateInput = {
    iconId?: SortOrder
  }

  export type categoriesIconMaxOrderByAggregateInput = {
    iconId?: SortOrder
    iconName?: SortOrder
  }

  export type categoriesIconMinOrderByAggregateInput = {
    iconId?: SortOrder
    iconName?: SortOrder
  }

  export type categoriesIconSumOrderByAggregateInput = {
    iconId?: SortOrder
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type userCategoriesUserIdCategoryIdCompoundUniqueInput = {
    userId: number
    categoryId: number
  }

  export type userCategoriesCountOrderByAggregateInput = {
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type userCategoriesAvgOrderByAggregateInput = {
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type userCategoriesMaxOrderByAggregateInput = {
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type userCategoriesMinOrderByAggregateInput = {
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type userCategoriesSumOrderByAggregateInput = {
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type goalsCountOrderByAggregateInput = {
    goalId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    goalAmount?: SortOrder
    currentAmount?: SortOrder
    created?: SortOrder
  }

  export type goalsAvgOrderByAggregateInput = {
    goalId?: SortOrder
    userId?: SortOrder
    goalAmount?: SortOrder
    currentAmount?: SortOrder
  }

  export type goalsMaxOrderByAggregateInput = {
    goalId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    goalAmount?: SortOrder
    currentAmount?: SortOrder
    created?: SortOrder
  }

  export type goalsMinOrderByAggregateInput = {
    goalId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    goalAmount?: SortOrder
    currentAmount?: SortOrder
    created?: SortOrder
  }

  export type goalsSumOrderByAggregateInput = {
    goalId?: SortOrder
    userId?: SortOrder
    goalAmount?: SortOrder
    currentAmount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type plansCountOrderByAggregateInput = {
    planId?: SortOrder
    userId?: SortOrder
    monthly?: SortOrder
    save?: SortOrder
    created?: SortOrder
  }

  export type plansAvgOrderByAggregateInput = {
    planId?: SortOrder
    userId?: SortOrder
    monthly?: SortOrder
    save?: SortOrder
  }

  export type plansMaxOrderByAggregateInput = {
    planId?: SortOrder
    userId?: SortOrder
    monthly?: SortOrder
    save?: SortOrder
    created?: SortOrder
  }

  export type plansMinOrderByAggregateInput = {
    planId?: SortOrder
    userId?: SortOrder
    monthly?: SortOrder
    save?: SortOrder
    created?: SortOrder
  }

  export type plansSumOrderByAggregateInput = {
    planId?: SortOrder
    userId?: SortOrder
    monthly?: SortOrder
    save?: SortOrder
  }

  export type EnumbonusUsageFilter<$PrismaModel = never> = {
    equals?: $Enums.bonusUsage | EnumbonusUsageFieldRefInput<$PrismaModel>
    in?: $Enums.bonusUsage[]
    notIn?: $Enums.bonusUsage[]
    not?: NestedEnumbonusUsageFilter<$PrismaModel> | $Enums.bonusUsage
  }

  export type BonusCountOrderByAggregateInput = {
    bonusId?: SortOrder
    userId?: SortOrder
    usuage?: SortOrder
    amount?: SortOrder
    source?: SortOrder
    created?: SortOrder
  }

  export type BonusAvgOrderByAggregateInput = {
    bonusId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type BonusMaxOrderByAggregateInput = {
    bonusId?: SortOrder
    userId?: SortOrder
    usuage?: SortOrder
    amount?: SortOrder
    source?: SortOrder
    created?: SortOrder
  }

  export type BonusMinOrderByAggregateInput = {
    bonusId?: SortOrder
    userId?: SortOrder
    usuage?: SortOrder
    amount?: SortOrder
    source?: SortOrder
    created?: SortOrder
  }

  export type BonusSumOrderByAggregateInput = {
    bonusId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type EnumbonusUsageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.bonusUsage | EnumbonusUsageFieldRefInput<$PrismaModel>
    in?: $Enums.bonusUsage[]
    notIn?: $Enums.bonusUsage[]
    not?: NestedEnumbonusUsageWithAggregatesFilter<$PrismaModel> | $Enums.bonusUsage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumbonusUsageFilter<$PrismaModel>
    _max?: NestedEnumbonusUsageFilter<$PrismaModel>
  }

  export type transactionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<transactionsCreateWithoutUsersInput, transactionsUncheckedCreateWithoutUsersInput> | transactionsCreateWithoutUsersInput[] | transactionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUsersInput | transactionsCreateOrConnectWithoutUsersInput[]
    createMany?: transactionsCreateManyUsersInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type goalsCreateNestedManyWithoutUsersInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
  }

  export type plansCreateNestedManyWithoutUsersInput = {
    create?: XOR<plansCreateWithoutUsersInput, plansUncheckedCreateWithoutUsersInput> | plansCreateWithoutUsersInput[] | plansUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: plansCreateOrConnectWithoutUsersInput | plansCreateOrConnectWithoutUsersInput[]
    createMany?: plansCreateManyUsersInputEnvelope
    connect?: plansWhereUniqueInput | plansWhereUniqueInput[]
  }

  export type BonusCreateNestedManyWithoutUsersInput = {
    create?: XOR<BonusCreateWithoutUsersInput, BonusUncheckedCreateWithoutUsersInput> | BonusCreateWithoutUsersInput[] | BonusUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BonusCreateOrConnectWithoutUsersInput | BonusCreateOrConnectWithoutUsersInput[]
    createMany?: BonusCreateManyUsersInputEnvelope
    connect?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
  }

  export type userCategoriesCreateNestedManyWithoutUsersInput = {
    create?: XOR<userCategoriesCreateWithoutUsersInput, userCategoriesUncheckedCreateWithoutUsersInput> | userCategoriesCreateWithoutUsersInput[] | userCategoriesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutUsersInput | userCategoriesCreateOrConnectWithoutUsersInput[]
    createMany?: userCategoriesCreateManyUsersInputEnvelope
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<transactionsCreateWithoutUsersInput, transactionsUncheckedCreateWithoutUsersInput> | transactionsCreateWithoutUsersInput[] | transactionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUsersInput | transactionsCreateOrConnectWithoutUsersInput[]
    createMany?: transactionsCreateManyUsersInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type goalsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
  }

  export type plansUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<plansCreateWithoutUsersInput, plansUncheckedCreateWithoutUsersInput> | plansCreateWithoutUsersInput[] | plansUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: plansCreateOrConnectWithoutUsersInput | plansCreateOrConnectWithoutUsersInput[]
    createMany?: plansCreateManyUsersInputEnvelope
    connect?: plansWhereUniqueInput | plansWhereUniqueInput[]
  }

  export type BonusUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<BonusCreateWithoutUsersInput, BonusUncheckedCreateWithoutUsersInput> | BonusCreateWithoutUsersInput[] | BonusUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BonusCreateOrConnectWithoutUsersInput | BonusCreateOrConnectWithoutUsersInput[]
    createMany?: BonusCreateManyUsersInputEnvelope
    connect?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
  }

  export type userCategoriesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<userCategoriesCreateWithoutUsersInput, userCategoriesUncheckedCreateWithoutUsersInput> | userCategoriesCreateWithoutUsersInput[] | userCategoriesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutUsersInput | userCategoriesCreateOrConnectWithoutUsersInput[]
    createMany?: userCategoriesCreateManyUsersInputEnvelope
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type transactionsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<transactionsCreateWithoutUsersInput, transactionsUncheckedCreateWithoutUsersInput> | transactionsCreateWithoutUsersInput[] | transactionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUsersInput | transactionsCreateOrConnectWithoutUsersInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutUsersInput | transactionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: transactionsCreateManyUsersInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutUsersInput | transactionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutUsersInput | transactionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type goalsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    upsert?: goalsUpsertWithWhereUniqueWithoutUsersInput | goalsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    set?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    disconnect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    delete?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    update?: goalsUpdateWithWhereUniqueWithoutUsersInput | goalsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: goalsUpdateManyWithWhereWithoutUsersInput | goalsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: goalsScalarWhereInput | goalsScalarWhereInput[]
  }

  export type plansUpdateManyWithoutUsersNestedInput = {
    create?: XOR<plansCreateWithoutUsersInput, plansUncheckedCreateWithoutUsersInput> | plansCreateWithoutUsersInput[] | plansUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: plansCreateOrConnectWithoutUsersInput | plansCreateOrConnectWithoutUsersInput[]
    upsert?: plansUpsertWithWhereUniqueWithoutUsersInput | plansUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: plansCreateManyUsersInputEnvelope
    set?: plansWhereUniqueInput | plansWhereUniqueInput[]
    disconnect?: plansWhereUniqueInput | plansWhereUniqueInput[]
    delete?: plansWhereUniqueInput | plansWhereUniqueInput[]
    connect?: plansWhereUniqueInput | plansWhereUniqueInput[]
    update?: plansUpdateWithWhereUniqueWithoutUsersInput | plansUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: plansUpdateManyWithWhereWithoutUsersInput | plansUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: plansScalarWhereInput | plansScalarWhereInput[]
  }

  export type BonusUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BonusCreateWithoutUsersInput, BonusUncheckedCreateWithoutUsersInput> | BonusCreateWithoutUsersInput[] | BonusUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BonusCreateOrConnectWithoutUsersInput | BonusCreateOrConnectWithoutUsersInput[]
    upsert?: BonusUpsertWithWhereUniqueWithoutUsersInput | BonusUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BonusCreateManyUsersInputEnvelope
    set?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    disconnect?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    delete?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    connect?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    update?: BonusUpdateWithWhereUniqueWithoutUsersInput | BonusUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BonusUpdateManyWithWhereWithoutUsersInput | BonusUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BonusScalarWhereInput | BonusScalarWhereInput[]
  }

  export type userCategoriesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<userCategoriesCreateWithoutUsersInput, userCategoriesUncheckedCreateWithoutUsersInput> | userCategoriesCreateWithoutUsersInput[] | userCategoriesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutUsersInput | userCategoriesCreateOrConnectWithoutUsersInput[]
    upsert?: userCategoriesUpsertWithWhereUniqueWithoutUsersInput | userCategoriesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: userCategoriesCreateManyUsersInputEnvelope
    set?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    disconnect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    delete?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    update?: userCategoriesUpdateWithWhereUniqueWithoutUsersInput | userCategoriesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: userCategoriesUpdateManyWithWhereWithoutUsersInput | userCategoriesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: userCategoriesScalarWhereInput | userCategoriesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type transactionsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<transactionsCreateWithoutUsersInput, transactionsUncheckedCreateWithoutUsersInput> | transactionsCreateWithoutUsersInput[] | transactionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutUsersInput | transactionsCreateOrConnectWithoutUsersInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutUsersInput | transactionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: transactionsCreateManyUsersInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutUsersInput | transactionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutUsersInput | transactionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type goalsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    upsert?: goalsUpsertWithWhereUniqueWithoutUsersInput | goalsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    set?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    disconnect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    delete?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    update?: goalsUpdateWithWhereUniqueWithoutUsersInput | goalsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: goalsUpdateManyWithWhereWithoutUsersInput | goalsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: goalsScalarWhereInput | goalsScalarWhereInput[]
  }

  export type plansUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<plansCreateWithoutUsersInput, plansUncheckedCreateWithoutUsersInput> | plansCreateWithoutUsersInput[] | plansUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: plansCreateOrConnectWithoutUsersInput | plansCreateOrConnectWithoutUsersInput[]
    upsert?: plansUpsertWithWhereUniqueWithoutUsersInput | plansUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: plansCreateManyUsersInputEnvelope
    set?: plansWhereUniqueInput | plansWhereUniqueInput[]
    disconnect?: plansWhereUniqueInput | plansWhereUniqueInput[]
    delete?: plansWhereUniqueInput | plansWhereUniqueInput[]
    connect?: plansWhereUniqueInput | plansWhereUniqueInput[]
    update?: plansUpdateWithWhereUniqueWithoutUsersInput | plansUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: plansUpdateManyWithWhereWithoutUsersInput | plansUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: plansScalarWhereInput | plansScalarWhereInput[]
  }

  export type BonusUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BonusCreateWithoutUsersInput, BonusUncheckedCreateWithoutUsersInput> | BonusCreateWithoutUsersInput[] | BonusUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BonusCreateOrConnectWithoutUsersInput | BonusCreateOrConnectWithoutUsersInput[]
    upsert?: BonusUpsertWithWhereUniqueWithoutUsersInput | BonusUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BonusCreateManyUsersInputEnvelope
    set?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    disconnect?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    delete?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    connect?: BonusWhereUniqueInput | BonusWhereUniqueInput[]
    update?: BonusUpdateWithWhereUniqueWithoutUsersInput | BonusUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BonusUpdateManyWithWhereWithoutUsersInput | BonusUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BonusScalarWhereInput | BonusScalarWhereInput[]
  }

  export type userCategoriesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<userCategoriesCreateWithoutUsersInput, userCategoriesUncheckedCreateWithoutUsersInput> | userCategoriesCreateWithoutUsersInput[] | userCategoriesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutUsersInput | userCategoriesCreateOrConnectWithoutUsersInput[]
    upsert?: userCategoriesUpsertWithWhereUniqueWithoutUsersInput | userCategoriesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: userCategoriesCreateManyUsersInputEnvelope
    set?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    disconnect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    delete?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    update?: userCategoriesUpdateWithWhereUniqueWithoutUsersInput | userCategoriesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: userCategoriesUpdateManyWithWhereWithoutUsersInput | userCategoriesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: userCategoriesScalarWhereInput | userCategoriesScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<usersCreateWithoutTransactionsInput, usersUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutTransactionsInput
    connect?: usersWhereUniqueInput
  }

  export type categoriesCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<categoriesCreateWithoutTransactionsInput, categoriesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutTransactionsInput
    connect?: categoriesWhereUniqueInput
  }

  export type EnumtransactionsTypeFieldUpdateOperationsInput = {
    set?: $Enums.transactionsType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<usersCreateWithoutTransactionsInput, usersUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutTransactionsInput
    upsert?: usersUpsertWithoutTransactionsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTransactionsInput, usersUpdateWithoutTransactionsInput>, usersUncheckedUpdateWithoutTransactionsInput>
  }

  export type categoriesUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<categoriesCreateWithoutTransactionsInput, categoriesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutTransactionsInput
    upsert?: categoriesUpsertWithoutTransactionsInput
    disconnect?: categoriesWhereInput | boolean
    delete?: categoriesWhereInput | boolean
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutTransactionsInput, categoriesUpdateWithoutTransactionsInput>, categoriesUncheckedUpdateWithoutTransactionsInput>
  }

  export type categoriesIconCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<categoriesIconCreateWithoutCategoriesInput, categoriesIconUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: categoriesIconCreateOrConnectWithoutCategoriesInput
    connect?: categoriesIconWhereUniqueInput
  }

  export type transactionsCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<transactionsCreateWithoutCategoriesInput, transactionsUncheckedCreateWithoutCategoriesInput> | transactionsCreateWithoutCategoriesInput[] | transactionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCategoriesInput | transactionsCreateOrConnectWithoutCategoriesInput[]
    createMany?: transactionsCreateManyCategoriesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type userCategoriesCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<userCategoriesCreateWithoutCategoriesInput, userCategoriesUncheckedCreateWithoutCategoriesInput> | userCategoriesCreateWithoutCategoriesInput[] | userCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutCategoriesInput | userCategoriesCreateOrConnectWithoutCategoriesInput[]
    createMany?: userCategoriesCreateManyCategoriesInputEnvelope
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<transactionsCreateWithoutCategoriesInput, transactionsUncheckedCreateWithoutCategoriesInput> | transactionsCreateWithoutCategoriesInput[] | transactionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCategoriesInput | transactionsCreateOrConnectWithoutCategoriesInput[]
    createMany?: transactionsCreateManyCategoriesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type userCategoriesUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<userCategoriesCreateWithoutCategoriesInput, userCategoriesUncheckedCreateWithoutCategoriesInput> | userCategoriesCreateWithoutCategoriesInput[] | userCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutCategoriesInput | userCategoriesCreateOrConnectWithoutCategoriesInput[]
    createMany?: userCategoriesCreateManyCategoriesInputEnvelope
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
  }

  export type categoriesIconUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<categoriesIconCreateWithoutCategoriesInput, categoriesIconUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: categoriesIconCreateOrConnectWithoutCategoriesInput
    upsert?: categoriesIconUpsertWithoutCategoriesInput
    connect?: categoriesIconWhereUniqueInput
    update?: XOR<XOR<categoriesIconUpdateToOneWithWhereWithoutCategoriesInput, categoriesIconUpdateWithoutCategoriesInput>, categoriesIconUncheckedUpdateWithoutCategoriesInput>
  }

  export type transactionsUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<transactionsCreateWithoutCategoriesInput, transactionsUncheckedCreateWithoutCategoriesInput> | transactionsCreateWithoutCategoriesInput[] | transactionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCategoriesInput | transactionsCreateOrConnectWithoutCategoriesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutCategoriesInput | transactionsUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: transactionsCreateManyCategoriesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutCategoriesInput | transactionsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutCategoriesInput | transactionsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type userCategoriesUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<userCategoriesCreateWithoutCategoriesInput, userCategoriesUncheckedCreateWithoutCategoriesInput> | userCategoriesCreateWithoutCategoriesInput[] | userCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutCategoriesInput | userCategoriesCreateOrConnectWithoutCategoriesInput[]
    upsert?: userCategoriesUpsertWithWhereUniqueWithoutCategoriesInput | userCategoriesUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: userCategoriesCreateManyCategoriesInputEnvelope
    set?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    disconnect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    delete?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    update?: userCategoriesUpdateWithWhereUniqueWithoutCategoriesInput | userCategoriesUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: userCategoriesUpdateManyWithWhereWithoutCategoriesInput | userCategoriesUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: userCategoriesScalarWhereInput | userCategoriesScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<transactionsCreateWithoutCategoriesInput, transactionsUncheckedCreateWithoutCategoriesInput> | transactionsCreateWithoutCategoriesInput[] | transactionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCategoriesInput | transactionsCreateOrConnectWithoutCategoriesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutCategoriesInput | transactionsUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: transactionsCreateManyCategoriesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutCategoriesInput | transactionsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutCategoriesInput | transactionsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type userCategoriesUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<userCategoriesCreateWithoutCategoriesInput, userCategoriesUncheckedCreateWithoutCategoriesInput> | userCategoriesCreateWithoutCategoriesInput[] | userCategoriesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: userCategoriesCreateOrConnectWithoutCategoriesInput | userCategoriesCreateOrConnectWithoutCategoriesInput[]
    upsert?: userCategoriesUpsertWithWhereUniqueWithoutCategoriesInput | userCategoriesUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: userCategoriesCreateManyCategoriesInputEnvelope
    set?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    disconnect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    delete?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    connect?: userCategoriesWhereUniqueInput | userCategoriesWhereUniqueInput[]
    update?: userCategoriesUpdateWithWhereUniqueWithoutCategoriesInput | userCategoriesUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: userCategoriesUpdateManyWithWhereWithoutCategoriesInput | userCategoriesUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: userCategoriesScalarWhereInput | userCategoriesScalarWhereInput[]
  }

  export type categoriesCreateNestedManyWithoutIconInput = {
    create?: XOR<categoriesCreateWithoutIconInput, categoriesUncheckedCreateWithoutIconInput> | categoriesCreateWithoutIconInput[] | categoriesUncheckedCreateWithoutIconInput[]
    connectOrCreate?: categoriesCreateOrConnectWithoutIconInput | categoriesCreateOrConnectWithoutIconInput[]
    createMany?: categoriesCreateManyIconInputEnvelope
    connect?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
  }

  export type categoriesUncheckedCreateNestedManyWithoutIconInput = {
    create?: XOR<categoriesCreateWithoutIconInput, categoriesUncheckedCreateWithoutIconInput> | categoriesCreateWithoutIconInput[] | categoriesUncheckedCreateWithoutIconInput[]
    connectOrCreate?: categoriesCreateOrConnectWithoutIconInput | categoriesCreateOrConnectWithoutIconInput[]
    createMany?: categoriesCreateManyIconInputEnvelope
    connect?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
  }

  export type categoriesUpdateManyWithoutIconNestedInput = {
    create?: XOR<categoriesCreateWithoutIconInput, categoriesUncheckedCreateWithoutIconInput> | categoriesCreateWithoutIconInput[] | categoriesUncheckedCreateWithoutIconInput[]
    connectOrCreate?: categoriesCreateOrConnectWithoutIconInput | categoriesCreateOrConnectWithoutIconInput[]
    upsert?: categoriesUpsertWithWhereUniqueWithoutIconInput | categoriesUpsertWithWhereUniqueWithoutIconInput[]
    createMany?: categoriesCreateManyIconInputEnvelope
    set?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    disconnect?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    delete?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    connect?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    update?: categoriesUpdateWithWhereUniqueWithoutIconInput | categoriesUpdateWithWhereUniqueWithoutIconInput[]
    updateMany?: categoriesUpdateManyWithWhereWithoutIconInput | categoriesUpdateManyWithWhereWithoutIconInput[]
    deleteMany?: categoriesScalarWhereInput | categoriesScalarWhereInput[]
  }

  export type categoriesUncheckedUpdateManyWithoutIconNestedInput = {
    create?: XOR<categoriesCreateWithoutIconInput, categoriesUncheckedCreateWithoutIconInput> | categoriesCreateWithoutIconInput[] | categoriesUncheckedCreateWithoutIconInput[]
    connectOrCreate?: categoriesCreateOrConnectWithoutIconInput | categoriesCreateOrConnectWithoutIconInput[]
    upsert?: categoriesUpsertWithWhereUniqueWithoutIconInput | categoriesUpsertWithWhereUniqueWithoutIconInput[]
    createMany?: categoriesCreateManyIconInputEnvelope
    set?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    disconnect?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    delete?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    connect?: categoriesWhereUniqueInput | categoriesWhereUniqueInput[]
    update?: categoriesUpdateWithWhereUniqueWithoutIconInput | categoriesUpdateWithWhereUniqueWithoutIconInput[]
    updateMany?: categoriesUpdateManyWithWhereWithoutIconInput | categoriesUpdateManyWithWhereWithoutIconInput[]
    deleteMany?: categoriesScalarWhereInput | categoriesScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutUserCategoriesInput = {
    create?: XOR<usersCreateWithoutUserCategoriesInput, usersUncheckedCreateWithoutUserCategoriesInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserCategoriesInput
    connect?: usersWhereUniqueInput
  }

  export type categoriesCreateNestedOneWithoutUserCategoriesInput = {
    create?: XOR<categoriesCreateWithoutUserCategoriesInput, categoriesUncheckedCreateWithoutUserCategoriesInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutUserCategoriesInput
    connect?: categoriesWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutUserCategoriesNestedInput = {
    create?: XOR<usersCreateWithoutUserCategoriesInput, usersUncheckedCreateWithoutUserCategoriesInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserCategoriesInput
    upsert?: usersUpsertWithoutUserCategoriesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUserCategoriesInput, usersUpdateWithoutUserCategoriesInput>, usersUncheckedUpdateWithoutUserCategoriesInput>
  }

  export type categoriesUpdateOneRequiredWithoutUserCategoriesNestedInput = {
    create?: XOR<categoriesCreateWithoutUserCategoriesInput, categoriesUncheckedCreateWithoutUserCategoriesInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutUserCategoriesInput
    upsert?: categoriesUpsertWithoutUserCategoriesInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutUserCategoriesInput, categoriesUpdateWithoutUserCategoriesInput>, categoriesUncheckedUpdateWithoutUserCategoriesInput>
  }

  export type usersCreateNestedOneWithoutGoalsInput = {
    create?: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: usersCreateOrConnectWithoutGoalsInput
    connect?: usersWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: usersCreateOrConnectWithoutGoalsInput
    upsert?: usersUpsertWithoutGoalsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutGoalsInput, usersUpdateWithoutGoalsInput>, usersUncheckedUpdateWithoutGoalsInput>
  }

  export type usersCreateNestedOneWithoutPlansInput = {
    create?: XOR<usersCreateWithoutPlansInput, usersUncheckedCreateWithoutPlansInput>
    connectOrCreate?: usersCreateOrConnectWithoutPlansInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutPlansNestedInput = {
    create?: XOR<usersCreateWithoutPlansInput, usersUncheckedCreateWithoutPlansInput>
    connectOrCreate?: usersCreateOrConnectWithoutPlansInput
    upsert?: usersUpsertWithoutPlansInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutPlansInput, usersUpdateWithoutPlansInput>, usersUncheckedUpdateWithoutPlansInput>
  }

  export type usersCreateNestedOneWithoutBonusInput = {
    create?: XOR<usersCreateWithoutBonusInput, usersUncheckedCreateWithoutBonusInput>
    connectOrCreate?: usersCreateOrConnectWithoutBonusInput
    connect?: usersWhereUniqueInput
  }

  export type EnumbonusUsageFieldUpdateOperationsInput = {
    set?: $Enums.bonusUsage
  }

  export type usersUpdateOneRequiredWithoutBonusNestedInput = {
    create?: XOR<usersCreateWithoutBonusInput, usersUncheckedCreateWithoutBonusInput>
    connectOrCreate?: usersCreateOrConnectWithoutBonusInput
    upsert?: usersUpsertWithoutBonusInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutBonusInput, usersUpdateWithoutBonusInput>, usersUncheckedUpdateWithoutBonusInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumtransactionsTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionsType | EnumtransactionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.transactionsType[]
    notIn?: $Enums.transactionsType[]
    not?: NestedEnumtransactionsTypeFilter<$PrismaModel> | $Enums.transactionsType
  }

  export type NestedEnumtransactionsTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transactionsType | EnumtransactionsTypeFieldRefInput<$PrismaModel>
    in?: $Enums.transactionsType[]
    notIn?: $Enums.transactionsType[]
    not?: NestedEnumtransactionsTypeWithAggregatesFilter<$PrismaModel> | $Enums.transactionsType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransactionsTypeFilter<$PrismaModel>
    _max?: NestedEnumtransactionsTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumbonusUsageFilter<$PrismaModel = never> = {
    equals?: $Enums.bonusUsage | EnumbonusUsageFieldRefInput<$PrismaModel>
    in?: $Enums.bonusUsage[]
    notIn?: $Enums.bonusUsage[]
    not?: NestedEnumbonusUsageFilter<$PrismaModel> | $Enums.bonusUsage
  }

  export type NestedEnumbonusUsageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.bonusUsage | EnumbonusUsageFieldRefInput<$PrismaModel>
    in?: $Enums.bonusUsage[]
    notIn?: $Enums.bonusUsage[]
    not?: NestedEnumbonusUsageWithAggregatesFilter<$PrismaModel> | $Enums.bonusUsage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumbonusUsageFilter<$PrismaModel>
    _max?: NestedEnumbonusUsageFilter<$PrismaModel>
  }

  export type transactionsCreateWithoutUsersInput = {
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
    categories?: categoriesCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutUsersInput = {
    transactionId?: number
    categoryId: number
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
  }

  export type transactionsCreateOrConnectWithoutUsersInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutUsersInput, transactionsUncheckedCreateWithoutUsersInput>
  }

  export type transactionsCreateManyUsersInputEnvelope = {
    data: transactionsCreateManyUsersInput | transactionsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type goalsCreateWithoutUsersInput = {
    name?: string | null
    goalAmount: number
    currentAmount?: number | null
    created?: Date | string
  }

  export type goalsUncheckedCreateWithoutUsersInput = {
    goalId?: number
    name?: string | null
    goalAmount: number
    currentAmount?: number | null
    created?: Date | string
  }

  export type goalsCreateOrConnectWithoutUsersInput = {
    where: goalsWhereUniqueInput
    create: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput>
  }

  export type goalsCreateManyUsersInputEnvelope = {
    data: goalsCreateManyUsersInput | goalsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type plansCreateWithoutUsersInput = {
    monthly: number
    save: number
    created?: Date | string
  }

  export type plansUncheckedCreateWithoutUsersInput = {
    planId?: number
    monthly: number
    save: number
    created?: Date | string
  }

  export type plansCreateOrConnectWithoutUsersInput = {
    where: plansWhereUniqueInput
    create: XOR<plansCreateWithoutUsersInput, plansUncheckedCreateWithoutUsersInput>
  }

  export type plansCreateManyUsersInputEnvelope = {
    data: plansCreateManyUsersInput | plansCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type BonusCreateWithoutUsersInput = {
    usuage: $Enums.bonusUsage
    amount: number
    source: string
    created?: Date | string
  }

  export type BonusUncheckedCreateWithoutUsersInput = {
    bonusId?: number
    usuage: $Enums.bonusUsage
    amount: number
    source: string
    created?: Date | string
  }

  export type BonusCreateOrConnectWithoutUsersInput = {
    where: BonusWhereUniqueInput
    create: XOR<BonusCreateWithoutUsersInput, BonusUncheckedCreateWithoutUsersInput>
  }

  export type BonusCreateManyUsersInputEnvelope = {
    data: BonusCreateManyUsersInput | BonusCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type userCategoriesCreateWithoutUsersInput = {
    categories: categoriesCreateNestedOneWithoutUserCategoriesInput
  }

  export type userCategoriesUncheckedCreateWithoutUsersInput = {
    categoryId: number
  }

  export type userCategoriesCreateOrConnectWithoutUsersInput = {
    where: userCategoriesWhereUniqueInput
    create: XOR<userCategoriesCreateWithoutUsersInput, userCategoriesUncheckedCreateWithoutUsersInput>
  }

  export type userCategoriesCreateManyUsersInputEnvelope = {
    data: userCategoriesCreateManyUsersInput | userCategoriesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type transactionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutUsersInput, transactionsUncheckedUpdateWithoutUsersInput>
    create: XOR<transactionsCreateWithoutUsersInput, transactionsUncheckedCreateWithoutUsersInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutUsersInput, transactionsUncheckedUpdateWithoutUsersInput>
  }

  export type transactionsUpdateManyWithWhereWithoutUsersInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutUsersInput>
  }

  export type transactionsScalarWhereInput = {
    AND?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    OR?: transactionsScalarWhereInput[]
    NOT?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    transactionId?: IntFilter<"transactions"> | number
    userId?: IntFilter<"transactions"> | number
    categoryId?: IntFilter<"transactions"> | number
    type?: EnumtransactionsTypeFilter<"transactions"> | $Enums.transactionsType
    amount?: FloatFilter<"transactions"> | number
    created?: DateTimeFilter<"transactions"> | Date | string
  }

  export type goalsUpsertWithWhereUniqueWithoutUsersInput = {
    where: goalsWhereUniqueInput
    update: XOR<goalsUpdateWithoutUsersInput, goalsUncheckedUpdateWithoutUsersInput>
    create: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput>
  }

  export type goalsUpdateWithWhereUniqueWithoutUsersInput = {
    where: goalsWhereUniqueInput
    data: XOR<goalsUpdateWithoutUsersInput, goalsUncheckedUpdateWithoutUsersInput>
  }

  export type goalsUpdateManyWithWhereWithoutUsersInput = {
    where: goalsScalarWhereInput
    data: XOR<goalsUpdateManyMutationInput, goalsUncheckedUpdateManyWithoutUsersInput>
  }

  export type goalsScalarWhereInput = {
    AND?: goalsScalarWhereInput | goalsScalarWhereInput[]
    OR?: goalsScalarWhereInput[]
    NOT?: goalsScalarWhereInput | goalsScalarWhereInput[]
    goalId?: IntFilter<"goals"> | number
    userId?: IntFilter<"goals"> | number
    name?: StringNullableFilter<"goals"> | string | null
    goalAmount?: IntFilter<"goals"> | number
    currentAmount?: IntNullableFilter<"goals"> | number | null
    created?: DateTimeFilter<"goals"> | Date | string
  }

  export type plansUpsertWithWhereUniqueWithoutUsersInput = {
    where: plansWhereUniqueInput
    update: XOR<plansUpdateWithoutUsersInput, plansUncheckedUpdateWithoutUsersInput>
    create: XOR<plansCreateWithoutUsersInput, plansUncheckedCreateWithoutUsersInput>
  }

  export type plansUpdateWithWhereUniqueWithoutUsersInput = {
    where: plansWhereUniqueInput
    data: XOR<plansUpdateWithoutUsersInput, plansUncheckedUpdateWithoutUsersInput>
  }

  export type plansUpdateManyWithWhereWithoutUsersInput = {
    where: plansScalarWhereInput
    data: XOR<plansUpdateManyMutationInput, plansUncheckedUpdateManyWithoutUsersInput>
  }

  export type plansScalarWhereInput = {
    AND?: plansScalarWhereInput | plansScalarWhereInput[]
    OR?: plansScalarWhereInput[]
    NOT?: plansScalarWhereInput | plansScalarWhereInput[]
    planId?: IntFilter<"plans"> | number
    userId?: IntFilter<"plans"> | number
    monthly?: FloatFilter<"plans"> | number
    save?: FloatFilter<"plans"> | number
    created?: DateTimeFilter<"plans"> | Date | string
  }

  export type BonusUpsertWithWhereUniqueWithoutUsersInput = {
    where: BonusWhereUniqueInput
    update: XOR<BonusUpdateWithoutUsersInput, BonusUncheckedUpdateWithoutUsersInput>
    create: XOR<BonusCreateWithoutUsersInput, BonusUncheckedCreateWithoutUsersInput>
  }

  export type BonusUpdateWithWhereUniqueWithoutUsersInput = {
    where: BonusWhereUniqueInput
    data: XOR<BonusUpdateWithoutUsersInput, BonusUncheckedUpdateWithoutUsersInput>
  }

  export type BonusUpdateManyWithWhereWithoutUsersInput = {
    where: BonusScalarWhereInput
    data: XOR<BonusUpdateManyMutationInput, BonusUncheckedUpdateManyWithoutUsersInput>
  }

  export type BonusScalarWhereInput = {
    AND?: BonusScalarWhereInput | BonusScalarWhereInput[]
    OR?: BonusScalarWhereInput[]
    NOT?: BonusScalarWhereInput | BonusScalarWhereInput[]
    bonusId?: IntFilter<"Bonus"> | number
    userId?: IntFilter<"Bonus"> | number
    usuage?: EnumbonusUsageFilter<"Bonus"> | $Enums.bonusUsage
    amount?: IntFilter<"Bonus"> | number
    source?: StringFilter<"Bonus"> | string
    created?: DateTimeFilter<"Bonus"> | Date | string
  }

  export type userCategoriesUpsertWithWhereUniqueWithoutUsersInput = {
    where: userCategoriesWhereUniqueInput
    update: XOR<userCategoriesUpdateWithoutUsersInput, userCategoriesUncheckedUpdateWithoutUsersInput>
    create: XOR<userCategoriesCreateWithoutUsersInput, userCategoriesUncheckedCreateWithoutUsersInput>
  }

  export type userCategoriesUpdateWithWhereUniqueWithoutUsersInput = {
    where: userCategoriesWhereUniqueInput
    data: XOR<userCategoriesUpdateWithoutUsersInput, userCategoriesUncheckedUpdateWithoutUsersInput>
  }

  export type userCategoriesUpdateManyWithWhereWithoutUsersInput = {
    where: userCategoriesScalarWhereInput
    data: XOR<userCategoriesUpdateManyMutationInput, userCategoriesUncheckedUpdateManyWithoutUsersInput>
  }

  export type userCategoriesScalarWhereInput = {
    AND?: userCategoriesScalarWhereInput | userCategoriesScalarWhereInput[]
    OR?: userCategoriesScalarWhereInput[]
    NOT?: userCategoriesScalarWhereInput | userCategoriesScalarWhereInput[]
    userId?: IntFilter<"userCategories"> | number
    categoryId?: IntFilter<"userCategories"> | number
  }

  export type usersCreateWithoutTransactionsInput = {
    username: string
    password: string
    image?: string | null
    created?: Date | string
    goals?: goalsCreateNestedManyWithoutUsersInput
    plans?: plansCreateNestedManyWithoutUsersInput
    Bonus?: BonusCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutTransactionsInput = {
    userId?: number
    username: string
    password: string
    image?: string | null
    created?: Date | string
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    plans?: plansUncheckedCreateNestedManyWithoutUsersInput
    Bonus?: BonusUncheckedCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutTransactionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTransactionsInput, usersUncheckedCreateWithoutTransactionsInput>
  }

  export type categoriesCreateWithoutTransactionsInput = {
    name: string
    icon: categoriesIconCreateNestedOneWithoutCategoriesInput
    userCategories?: userCategoriesCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateWithoutTransactionsInput = {
    categoryId?: number
    name: string
    iconId: number
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesCreateOrConnectWithoutTransactionsInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutTransactionsInput, categoriesUncheckedCreateWithoutTransactionsInput>
  }

  export type usersUpsertWithoutTransactionsInput = {
    update: XOR<usersUpdateWithoutTransactionsInput, usersUncheckedUpdateWithoutTransactionsInput>
    create: XOR<usersCreateWithoutTransactionsInput, usersUncheckedCreateWithoutTransactionsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTransactionsInput, usersUncheckedUpdateWithoutTransactionsInput>
  }

  export type usersUpdateWithoutTransactionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: goalsUpdateManyWithoutUsersNestedInput
    plans?: plansUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutTransactionsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    plans?: plansUncheckedUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUncheckedUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type categoriesUpsertWithoutTransactionsInput = {
    update: XOR<categoriesUpdateWithoutTransactionsInput, categoriesUncheckedUpdateWithoutTransactionsInput>
    create: XOR<categoriesCreateWithoutTransactionsInput, categoriesUncheckedCreateWithoutTransactionsInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutTransactionsInput, categoriesUncheckedUpdateWithoutTransactionsInput>
  }

  export type categoriesUpdateWithoutTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: categoriesIconUpdateOneRequiredWithoutCategoriesNestedInput
    userCategories?: userCategoriesUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateWithoutTransactionsInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    iconId?: IntFieldUpdateOperationsInput | number
    userCategories?: userCategoriesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesIconCreateWithoutCategoriesInput = {
    iconName: string
  }

  export type categoriesIconUncheckedCreateWithoutCategoriesInput = {
    iconId?: number
    iconName: string
  }

  export type categoriesIconCreateOrConnectWithoutCategoriesInput = {
    where: categoriesIconWhereUniqueInput
    create: XOR<categoriesIconCreateWithoutCategoriesInput, categoriesIconUncheckedCreateWithoutCategoriesInput>
  }

  export type transactionsCreateWithoutCategoriesInput = {
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
    users: usersCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutCategoriesInput = {
    transactionId?: number
    userId: number
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
  }

  export type transactionsCreateOrConnectWithoutCategoriesInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutCategoriesInput, transactionsUncheckedCreateWithoutCategoriesInput>
  }

  export type transactionsCreateManyCategoriesInputEnvelope = {
    data: transactionsCreateManyCategoriesInput | transactionsCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type userCategoriesCreateWithoutCategoriesInput = {
    users: usersCreateNestedOneWithoutUserCategoriesInput
  }

  export type userCategoriesUncheckedCreateWithoutCategoriesInput = {
    userId: number
  }

  export type userCategoriesCreateOrConnectWithoutCategoriesInput = {
    where: userCategoriesWhereUniqueInput
    create: XOR<userCategoriesCreateWithoutCategoriesInput, userCategoriesUncheckedCreateWithoutCategoriesInput>
  }

  export type userCategoriesCreateManyCategoriesInputEnvelope = {
    data: userCategoriesCreateManyCategoriesInput | userCategoriesCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type categoriesIconUpsertWithoutCategoriesInput = {
    update: XOR<categoriesIconUpdateWithoutCategoriesInput, categoriesIconUncheckedUpdateWithoutCategoriesInput>
    create: XOR<categoriesIconCreateWithoutCategoriesInput, categoriesIconUncheckedCreateWithoutCategoriesInput>
    where?: categoriesIconWhereInput
  }

  export type categoriesIconUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: categoriesIconWhereInput
    data: XOR<categoriesIconUpdateWithoutCategoriesInput, categoriesIconUncheckedUpdateWithoutCategoriesInput>
  }

  export type categoriesIconUpdateWithoutCategoriesInput = {
    iconName?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesIconUncheckedUpdateWithoutCategoriesInput = {
    iconId?: IntFieldUpdateOperationsInput | number
    iconName?: StringFieldUpdateOperationsInput | string
  }

  export type transactionsUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutCategoriesInput, transactionsUncheckedUpdateWithoutCategoriesInput>
    create: XOR<transactionsCreateWithoutCategoriesInput, transactionsUncheckedCreateWithoutCategoriesInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutCategoriesInput, transactionsUncheckedUpdateWithoutCategoriesInput>
  }

  export type transactionsUpdateManyWithWhereWithoutCategoriesInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type userCategoriesUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: userCategoriesWhereUniqueInput
    update: XOR<userCategoriesUpdateWithoutCategoriesInput, userCategoriesUncheckedUpdateWithoutCategoriesInput>
    create: XOR<userCategoriesCreateWithoutCategoriesInput, userCategoriesUncheckedCreateWithoutCategoriesInput>
  }

  export type userCategoriesUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: userCategoriesWhereUniqueInput
    data: XOR<userCategoriesUpdateWithoutCategoriesInput, userCategoriesUncheckedUpdateWithoutCategoriesInput>
  }

  export type userCategoriesUpdateManyWithWhereWithoutCategoriesInput = {
    where: userCategoriesScalarWhereInput
    data: XOR<userCategoriesUpdateManyMutationInput, userCategoriesUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type categoriesCreateWithoutIconInput = {
    name: string
    transactions?: transactionsCreateNestedManyWithoutCategoriesInput
    userCategories?: userCategoriesCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateWithoutIconInput = {
    categoryId?: number
    name: string
    transactions?: transactionsUncheckedCreateNestedManyWithoutCategoriesInput
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesCreateOrConnectWithoutIconInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutIconInput, categoriesUncheckedCreateWithoutIconInput>
  }

  export type categoriesCreateManyIconInputEnvelope = {
    data: categoriesCreateManyIconInput | categoriesCreateManyIconInput[]
    skipDuplicates?: boolean
  }

  export type categoriesUpsertWithWhereUniqueWithoutIconInput = {
    where: categoriesWhereUniqueInput
    update: XOR<categoriesUpdateWithoutIconInput, categoriesUncheckedUpdateWithoutIconInput>
    create: XOR<categoriesCreateWithoutIconInput, categoriesUncheckedCreateWithoutIconInput>
  }

  export type categoriesUpdateWithWhereUniqueWithoutIconInput = {
    where: categoriesWhereUniqueInput
    data: XOR<categoriesUpdateWithoutIconInput, categoriesUncheckedUpdateWithoutIconInput>
  }

  export type categoriesUpdateManyWithWhereWithoutIconInput = {
    where: categoriesScalarWhereInput
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyWithoutIconInput>
  }

  export type categoriesScalarWhereInput = {
    AND?: categoriesScalarWhereInput | categoriesScalarWhereInput[]
    OR?: categoriesScalarWhereInput[]
    NOT?: categoriesScalarWhereInput | categoriesScalarWhereInput[]
    categoryId?: IntFilter<"categories"> | number
    name?: StringFilter<"categories"> | string
    iconId?: IntFilter<"categories"> | number
  }

  export type usersCreateWithoutUserCategoriesInput = {
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsCreateNestedManyWithoutUsersInput
    goals?: goalsCreateNestedManyWithoutUsersInput
    plans?: plansCreateNestedManyWithoutUsersInput
    Bonus?: BonusCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUserCategoriesInput = {
    userId?: number
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsUncheckedCreateNestedManyWithoutUsersInput
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    plans?: plansUncheckedCreateNestedManyWithoutUsersInput
    Bonus?: BonusUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUserCategoriesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUserCategoriesInput, usersUncheckedCreateWithoutUserCategoriesInput>
  }

  export type categoriesCreateWithoutUserCategoriesInput = {
    name: string
    icon: categoriesIconCreateNestedOneWithoutCategoriesInput
    transactions?: transactionsCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateWithoutUserCategoriesInput = {
    categoryId?: number
    name: string
    iconId: number
    transactions?: transactionsUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesCreateOrConnectWithoutUserCategoriesInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutUserCategoriesInput, categoriesUncheckedCreateWithoutUserCategoriesInput>
  }

  export type usersUpsertWithoutUserCategoriesInput = {
    update: XOR<usersUpdateWithoutUserCategoriesInput, usersUncheckedUpdateWithoutUserCategoriesInput>
    create: XOR<usersCreateWithoutUserCategoriesInput, usersUncheckedCreateWithoutUserCategoriesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUserCategoriesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUserCategoriesInput, usersUncheckedUpdateWithoutUserCategoriesInput>
  }

  export type usersUpdateWithoutUserCategoriesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUpdateManyWithoutUsersNestedInput
    goals?: goalsUpdateManyWithoutUsersNestedInput
    plans?: plansUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUserCategoriesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUncheckedUpdateManyWithoutUsersNestedInput
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    plans?: plansUncheckedUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type categoriesUpsertWithoutUserCategoriesInput = {
    update: XOR<categoriesUpdateWithoutUserCategoriesInput, categoriesUncheckedUpdateWithoutUserCategoriesInput>
    create: XOR<categoriesCreateWithoutUserCategoriesInput, categoriesUncheckedCreateWithoutUserCategoriesInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutUserCategoriesInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutUserCategoriesInput, categoriesUncheckedUpdateWithoutUserCategoriesInput>
  }

  export type categoriesUpdateWithoutUserCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: categoriesIconUpdateOneRequiredWithoutCategoriesNestedInput
    transactions?: transactionsUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateWithoutUserCategoriesInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    iconId?: IntFieldUpdateOperationsInput | number
    transactions?: transactionsUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type usersCreateWithoutGoalsInput = {
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsCreateNestedManyWithoutUsersInput
    plans?: plansCreateNestedManyWithoutUsersInput
    Bonus?: BonusCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutGoalsInput = {
    userId?: number
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsUncheckedCreateNestedManyWithoutUsersInput
    plans?: plansUncheckedCreateNestedManyWithoutUsersInput
    Bonus?: BonusUncheckedCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutGoalsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
  }

  export type usersUpsertWithoutGoalsInput = {
    update: XOR<usersUpdateWithoutGoalsInput, usersUncheckedUpdateWithoutGoalsInput>
    create: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutGoalsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutGoalsInput, usersUncheckedUpdateWithoutGoalsInput>
  }

  export type usersUpdateWithoutGoalsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUpdateManyWithoutUsersNestedInput
    plans?: plansUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutGoalsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUncheckedUpdateManyWithoutUsersNestedInput
    plans?: plansUncheckedUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUncheckedUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutPlansInput = {
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsCreateNestedManyWithoutUsersInput
    goals?: goalsCreateNestedManyWithoutUsersInput
    Bonus?: BonusCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutPlansInput = {
    userId?: number
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsUncheckedCreateNestedManyWithoutUsersInput
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    Bonus?: BonusUncheckedCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutPlansInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPlansInput, usersUncheckedCreateWithoutPlansInput>
  }

  export type usersUpsertWithoutPlansInput = {
    update: XOR<usersUpdateWithoutPlansInput, usersUncheckedUpdateWithoutPlansInput>
    create: XOR<usersCreateWithoutPlansInput, usersUncheckedCreateWithoutPlansInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutPlansInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutPlansInput, usersUncheckedUpdateWithoutPlansInput>
  }

  export type usersUpdateWithoutPlansInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUpdateManyWithoutUsersNestedInput
    goals?: goalsUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutPlansInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUncheckedUpdateManyWithoutUsersNestedInput
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    Bonus?: BonusUncheckedUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutBonusInput = {
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsCreateNestedManyWithoutUsersInput
    goals?: goalsCreateNestedManyWithoutUsersInput
    plans?: plansCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutBonusInput = {
    userId?: number
    username: string
    password: string
    image?: string | null
    created?: Date | string
    transactions?: transactionsUncheckedCreateNestedManyWithoutUsersInput
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    plans?: plansUncheckedCreateNestedManyWithoutUsersInput
    userCategories?: userCategoriesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutBonusInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBonusInput, usersUncheckedCreateWithoutBonusInput>
  }

  export type usersUpsertWithoutBonusInput = {
    update: XOR<usersUpdateWithoutBonusInput, usersUncheckedUpdateWithoutBonusInput>
    create: XOR<usersCreateWithoutBonusInput, usersUncheckedCreateWithoutBonusInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutBonusInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutBonusInput, usersUncheckedUpdateWithoutBonusInput>
  }

  export type usersUpdateWithoutBonusInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUpdateManyWithoutUsersNestedInput
    goals?: goalsUpdateManyWithoutUsersNestedInput
    plans?: plansUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutBonusInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: transactionsUncheckedUpdateManyWithoutUsersNestedInput
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    plans?: plansUncheckedUpdateManyWithoutUsersNestedInput
    userCategories?: userCategoriesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type transactionsCreateManyUsersInput = {
    transactionId?: number
    categoryId: number
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
  }

  export type goalsCreateManyUsersInput = {
    goalId?: number
    name?: string | null
    goalAmount: number
    currentAmount?: number | null
    created?: Date | string
  }

  export type plansCreateManyUsersInput = {
    planId?: number
    monthly: number
    save: number
    created?: Date | string
  }

  export type BonusCreateManyUsersInput = {
    bonusId?: number
    usuage: $Enums.bonusUsage
    amount: number
    source: string
    created?: Date | string
  }

  export type userCategoriesCreateManyUsersInput = {
    categoryId: number
  }

  export type transactionsUpdateWithoutUsersInput = {
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoriesUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutUsersInput = {
    transactionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsUncheckedUpdateManyWithoutUsersInput = {
    transactionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type goalsUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    goalAmount?: IntFieldUpdateOperationsInput | number
    currentAmount?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type goalsUncheckedUpdateWithoutUsersInput = {
    goalId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    goalAmount?: IntFieldUpdateOperationsInput | number
    currentAmount?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type goalsUncheckedUpdateManyWithoutUsersInput = {
    goalId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    goalAmount?: IntFieldUpdateOperationsInput | number
    currentAmount?: NullableIntFieldUpdateOperationsInput | number | null
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type plansUpdateWithoutUsersInput = {
    monthly?: FloatFieldUpdateOperationsInput | number
    save?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type plansUncheckedUpdateWithoutUsersInput = {
    planId?: IntFieldUpdateOperationsInput | number
    monthly?: FloatFieldUpdateOperationsInput | number
    save?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type plansUncheckedUpdateManyWithoutUsersInput = {
    planId?: IntFieldUpdateOperationsInput | number
    monthly?: FloatFieldUpdateOperationsInput | number
    save?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BonusUpdateWithoutUsersInput = {
    usuage?: EnumbonusUsageFieldUpdateOperationsInput | $Enums.bonusUsage
    amount?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BonusUncheckedUpdateWithoutUsersInput = {
    bonusId?: IntFieldUpdateOperationsInput | number
    usuage?: EnumbonusUsageFieldUpdateOperationsInput | $Enums.bonusUsage
    amount?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BonusUncheckedUpdateManyWithoutUsersInput = {
    bonusId?: IntFieldUpdateOperationsInput | number
    usuage?: EnumbonusUsageFieldUpdateOperationsInput | $Enums.bonusUsage
    amount?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCategoriesUpdateWithoutUsersInput = {
    categories?: categoriesUpdateOneRequiredWithoutUserCategoriesNestedInput
  }

  export type userCategoriesUncheckedUpdateWithoutUsersInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type userCategoriesUncheckedUpdateManyWithoutUsersInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type transactionsCreateManyCategoriesInput = {
    transactionId?: number
    userId: number
    type: $Enums.transactionsType
    amount: number
    created?: Date | string
  }

  export type userCategoriesCreateManyCategoriesInput = {
    userId: number
  }

  export type transactionsUpdateWithoutCategoriesInput = {
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutCategoriesInput = {
    transactionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsUncheckedUpdateManyWithoutCategoriesInput = {
    transactionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumtransactionsTypeFieldUpdateOperationsInput | $Enums.transactionsType
    amount?: FloatFieldUpdateOperationsInput | number
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCategoriesUpdateWithoutCategoriesInput = {
    users?: usersUpdateOneRequiredWithoutUserCategoriesNestedInput
  }

  export type userCategoriesUncheckedUpdateWithoutCategoriesInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type userCategoriesUncheckedUpdateManyWithoutCategoriesInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type categoriesCreateManyIconInput = {
    categoryId?: number
    name: string
  }

  export type categoriesUpdateWithoutIconInput = {
    name?: StringFieldUpdateOperationsInput | string
    transactions?: transactionsUpdateManyWithoutCategoriesNestedInput
    userCategories?: userCategoriesUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateWithoutIconInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    transactions?: transactionsUncheckedUpdateManyWithoutCategoriesNestedInput
    userCategories?: userCategoriesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateManyWithoutIconInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesIconCountOutputTypeDefaultArgs instead
     */
    export type CategoriesIconCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesIconCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use transactionsDefaultArgs instead
     */
    export type transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = transactionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesDefaultArgs instead
     */
    export type categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesIconDefaultArgs instead
     */
    export type categoriesIconArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesIconDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userCategoriesDefaultArgs instead
     */
    export type userCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userCategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use goalsDefaultArgs instead
     */
    export type goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = goalsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use plansDefaultArgs instead
     */
    export type plansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = plansDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BonusDefaultArgs instead
     */
    export type BonusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BonusDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}